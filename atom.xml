<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shucai</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-08-01T14:32:50.005Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Mr.chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>蔬菜vlog</title>
    <link href="http://example.com/2021/08/01/%E8%94%AC%E8%8F%9Cvlog/"/>
    <id>http://example.com/2021/08/01/%E8%94%AC%E8%8F%9Cvlog/</id>
    <published>2021-08-01T11:35:45.000Z</published>
    <updated>2021-08-01T14:32:50.005Z</updated>
    
    <content type="html"><![CDATA[<iframe style="width:100%;height:500px" src="//player.bilibili.com/player.html?aid=804502451&bvid=BV1Ty4y177CS&cid=380725404&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;iframe style=&quot;width:100%;height:500px&quot; src=&quot;//player.bilibili.com/player.html?aid=804502451&amp;bvid=BV1Ty4y177CS&amp;cid=380725404&amp;page=1&quot; scrolli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>晚风</title>
    <link href="http://example.com/2021/07/10/%E6%99%9A%E9%A3%8E/"/>
    <id>http://example.com/2021/07/10/%E6%99%9A%E9%A3%8E/</id>
    <published>2021-07-10T13:18:23.000Z</published>
    <updated>2021-08-01T13:47:54.153Z</updated>
    
    <content type="html"><![CDATA[<p>终于迎来周末，</p><a id="more"></a><p>上班上了一周，<br>因为是自己喜欢的工作<br>所以觉得再苦再累点的话，<br>只要每天都有学习到新的东西，<br>都会觉得很幸运，<br>真正的感觉到自己每天有在好好学习，<br>有在进步，</p><p>周六的一天，<br>一觉起来就是十一点多了，<br>前一晚还丁了个8点多的闹钟，<br>看来是多余的，<br>懒洋洋地收拾了一下，<br>就出门了。</p><p>从今天开始<br>要开始备考，<br>在图书馆呆了一下午，<br>感觉自己好久没有去图书馆了，<br>安安静静地氛围，<br>真的很适合学习，<br>没有人打扰，<br>沉浸在自己地世界里。<br>感觉我会爱上图书馆的。</p><p>为了不让美好的周末早早地结束，<br>我感觉要充实地利用起来，</p><p>于是，<br>晚上地时候，<br>我还是学到了学校去打篮球。</p><p>傍晚地天空，<br>彷佛一片美丽地图画，<br>自然地景色肆意地渲染着天空，<br>白云，晚霞，晚风，<br>在这一片高空中用它们自己地方式描绘美丽地画面。<br>让人看了不经驻足观望。</p><p>微微地晚风，<br>吹着很是舒服，<br>感觉所有地烦恼都被抛到了脑后<br>……</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;终于迎来周末，&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>毕业快乐 前程似锦</title>
    <link href="http://example.com/2021/07/04/%E6%AF%95%E4%B8%9A%E5%BF%AB%E4%B9%90-%E5%89%8D%E7%A8%8B%E4%BC%BC%E9%94%A6/"/>
    <id>http://example.com/2021/07/04/%E6%AF%95%E4%B8%9A%E5%BF%AB%E4%B9%90-%E5%89%8D%E7%A8%8B%E4%BC%BC%E9%94%A6/</id>
    <published>2021-07-04T14:03:14.000Z</published>
    <updated>2021-07-04T14:41:37.072Z</updated>
    
    <content type="html"><![CDATA[<p>将浪花送《入海》</p><a id="more"></a><pre><code> “时光的河入海流，我们终于分头走”， 大学四年，感谢遇见最好的你们， 从来不会想到，人生中最美好的大学时光， 就是认识了这么一群好朋友， 从大一到大四， 整整四年的时光， 说长也不长，说短也不短， 但这四年里发生的点点滴滴， 心酸与苦楚， 快乐与幸福， 都只有我们知道。 如今， 大学毕业， 大家都要踏上属于自己的道路， 各奔东西，奔赴美好的前程， 也许在以后的道路上， 会有许多的困难， 许多的东西都要自己一个人面对， 也许， 这就是成长的意义吧。 多少年后， 当我们再聚时， 或许已是都有家庭子女的人了， 但是， 那段美好的大学时光， 我们永远也不会忘记。</code></pre><p><img src="/2021/07/04/%E6%AF%95%E4%B8%9A%E5%BF%AB%E4%B9%90-%E5%89%8D%E7%A8%8B%E4%BC%BC%E9%94%A6/%E6%AF%95%E4%B8%9A%E5%BF%AB%E4%B9%9003.jpg" alt="毕业快乐"><br>   <img src="/2021/07/04/%E6%AF%95%E4%B8%9A%E5%BF%AB%E4%B9%90-%E5%89%8D%E7%A8%8B%E4%BC%BC%E9%94%A6/%E6%AF%95%E4%B8%9A%E5%BF%AB%E4%B9%90.jpg" alt="毕业快乐"><br>   <img src="/2021/07/04/%E6%AF%95%E4%B8%9A%E5%BF%AB%E4%B9%90-%E5%89%8D%E7%A8%8B%E4%BC%BC%E9%94%A6/%E6%AF%95%E4%B8%9A%E5%BF%AB%E4%B9%9001.jpg" alt="毕业快乐"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;将浪花送《入海》&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>v-if与v-show区别</title>
    <link href="http://example.com/2021/05/19/v-if%E4%B8%8Ev-show%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2021/05/19/v-if%E4%B8%8Ev-show%E5%8C%BA%E5%88%AB/</id>
    <published>2021-05-19T13:19:59.000Z</published>
    <updated>2021-05-19T13:37:49.363Z</updated>
    
    <content type="html"><![CDATA[<p>v-if 和 v-show 的区别</p><a id="more"></a><p><span style="color:red">手段:</span><br>v-if是动态的向DOM树内添加或者删除DOM元素；v-show是通过设置DOM元素的display样式属性控制显隐<br><span style="color:red">编译过程：</span><br>v-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；v-show只是简单的基于css切换<br><span style="color:red">编译条件：</span><br>v-if是惰性的，如果初始条件为假，则什么也不做；只有在条件第一次变为真时才开始局部编译（编译被缓存？编译被缓存后，然后再切换的时候进行局部卸载); v-show是在任何条件下（首次条件是否为真）都被编译，然后被缓存，而且DOM元素保留<br><span style="color:red">性能消耗：</span><br>v-if有更高的切换消耗；v-show有更高的初始渲染消耗<br><span style="color:red">使用场景：</span><br>v-if适合运营条件不大可能改变；v-show适合频繁切换<br><span style="color:red">相同点:</span><br> v-show 都可以动态控制着dom元素的显示隐藏<br><span style="color:red">不同点：</span><br>v-if 的显示隐藏是将DOM元素整个添加或删除，v-show 的显示隐藏是为DOM元素添加css的样式display，设置none或者是block，DOM元素是还存在的<br><span style="color:red">在渲染多个元素的时候，可以把一个 元素作为包装元素，并使用v-if 进行条件判断，最终的渲染不会包含这个元素，v-show是不支持 语法</span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;v-if 和 v-show 的区别&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>实现一个验证码功能</title>
    <link href="http://example.com/2021/05/17/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8A%9F%E8%83%BD/"/>
    <id>http://example.com/2021/05/17/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8A%9F%E8%83%BD/</id>
    <published>2021-05-17T15:54:24.000Z</published>
    <updated>2021-05-17T16:11:39.956Z</updated>
    
    <content type="html"><![CDATA[<p>实现验证码功能，用户输入显示的随机5位数的验证码，不区分大小写，输入正确则显示成功，输入错误则显示失败</p><a id="more"></a><p>源代码：<br>html部分：<br><img src="/2021/05/17/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8A%9F%E8%83%BD/%E9%AA%8C%E8%AF%81%E7%A0%8101.jpg" alt="验证码"><br>javascript部分：<br><img src="/2021/05/17/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8A%9F%E8%83%BD/%E9%AA%8C%E8%AF%81%E7%A0%8102.jpg" alt="验证码"></p><p>效果图：<br><img src="/2021/05/17/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8A%9F%E8%83%BD/%E9%AA%8C%E8%AF%81%E7%A0%8103.jpg" alt="验证码"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;实现验证码功能，用户输入显示的随机5位数的验证码，不区分大小写，输入正确则显示成功，输入错误则显示失败&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>JS中的let和var的区别</title>
    <link href="http://example.com/2021/05/16/JS%E4%B8%AD%E7%9A%84let%E5%92%8Cvar%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2021/05/16/JS%E4%B8%AD%E7%9A%84let%E5%92%8Cvar%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2021-05-16T06:19:26.000Z</published>
    <updated>2021-05-16T06:24:01.749Z</updated>
    
    <content type="html"><![CDATA[<p>ES6 新增了let命令，用来声明局部变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效，而且有暂时性死区的约束。</p><a id="more"></a><p>先看个var的常见变量提升的面试题目：</p><pre class="hljs javascript codeblock"><code class="javascript hljs">题目<span class="hljs-number"><span class="hljs-number">1</span>：<span class="hljs-keyword"><span class="hljs-keyword">var</span> a = <span class="hljs-number"><span class="hljs-number">99</span>;            <span class="hljs-comment"><span class="hljs-comment">// 全局变量a</span>f();                   <span class="hljs-comment"><span class="hljs-comment">// f是函数，虽然定义在调用的后面，但是函数声明会提升到作用域的顶部。 </span><span class="hljs-built_in"><span class="hljs-built_in">console</span>.log(a);        <span class="hljs-comment"><span class="hljs-comment">// a=&gt;99,  此时是全局变量的a</span><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">function</span> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">f</span>(</span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params"></span>) </span>&#123;  <span class="hljs-built_in"><span class="hljs-built_in">console</span>.log(a);      <span class="hljs-comment"><span class="hljs-comment">// 当前的a变量是下面变量a声明提升后，默认值undefined</span>  <span class="hljs-keyword"><span class="hljs-keyword">var</span> a = <span class="hljs-number"><span class="hljs-number">10</span>;  <span class="hljs-built_in"><span class="hljs-built_in">console</span>.log(a);      <span class="hljs-comment"><span class="hljs-comment">// a =&gt; 10</span>&#125;<span class="hljs-comment"><span class="hljs-comment">// 输出结果：</span><span class="hljs-literal"><span class="hljs-literal">undefined</span><span class="hljs-number"><span class="hljs-number">10</span><span class="hljs-number"><span class="hljs-number">99</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre><h1>ES6可以用let定义块级作用域变量</h1>在ES6之前，我们都是用var来声明变量，而且JS只有函数作用域和全局作用域，没有块级作用域，所以{}限定不了var声明变量的访问范围。例如：<pre class="hljs javascript codeblock"><code class="javascript hljs">&#123;   <span class="hljs-keyword"><span class="hljs-keyword">var</span> i = <span class="hljs-number"><span class="hljs-number">9</span>;&#125; <span class="hljs-built_in"><span class="hljs-built_in">console</span>.log(i);  <span class="hljs-comment"><span class="hljs-comment">// 9</span></span></span></span></span></code></pre><p>ES6新增的let，可以声明块级作用域的变量。</p><pre class="hljs javascript codeblock"><code class="javascript hljs">&#123;   <span class="hljs-keyword"><span class="hljs-keyword">let</span> i = <span class="hljs-number"><span class="hljs-number">9</span>;     <span class="hljs-comment"><span class="hljs-comment">// i变量只在 花括号内有效！！！</span>&#125; <span class="hljs-built_in"><span class="hljs-built_in">console</span>.log(i);  <span class="hljs-comment"><span class="hljs-comment">// Uncaught ReferenceError: i is not defined</span></span></span></span></span></span></code></pre><h1></h1>let 配合for循环的独特应用let非常适合用于 for循环内部的块级作用域。JS中的for循环体比较特殊，每次执行都是一个全新的独立的块作用域，用let声明的变量传入到 for循环体的作用域后，不会发生改变，不受外界的影响。看一个常见的面试题目：<pre class="hljs javascript codeblock"><code class="javascript hljs"><span class="hljs-keyword"><span class="hljs-keyword">for</span> (<span class="hljs-keyword"><span class="hljs-keyword">var</span> i = <span class="hljs-number"><span class="hljs-number">0</span>; i &lt;<span class="hljs-number"><span class="hljs-number">10</span>; i++) &#123;    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">function</span>(</span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params"></span>) </span>&#123;  <span class="hljs-comment"><span class="hljs-comment">// 同步注册回调函数到 异步的 宏任务队列。</span>    <span class="hljs-built_in"><span class="hljs-built_in">console</span>.log(i);        <span class="hljs-comment"><span class="hljs-comment">// 执行此代码时，同步代码for循环已经执行完成</span>  &#125;, <span class="hljs-number"><span class="hljs-number">0</span>);&#125;<span class="hljs-comment"><span class="hljs-comment">// 输出结果</span><span class="hljs-number"><span class="hljs-number">10</span>   共<span class="hljs-number"><span class="hljs-number">10</span>个<span class="hljs-comment"><span class="hljs-comment">// 这里面的知识点： JS的事件循环机制，setTimeout的机制等</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre><p>如果把 var改成 let声明：</p><pre class="hljs javascript codeblock"><code class="javascript hljs"><span class="hljs-comment"><span class="hljs-comment">// i虽然在全局作用域声明，但是在for循环体局部作用域中使用的时候，变量会被固定，不受外界干扰。</span><span class="hljs-keyword"><span class="hljs-keyword">for</span> (<span class="hljs-keyword"><span class="hljs-keyword">let</span> i = <span class="hljs-number"><span class="hljs-number">0</span>; i &lt; <span class="hljs-number"><span class="hljs-number">10</span>; i++) &#123;   <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">function</span>(</span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params"></span>) </span>&#123;    <span class="hljs-built_in"><span class="hljs-built_in">console</span>.log(i);    <span class="hljs-comment"><span class="hljs-comment">//  i 是循环体内局部作用域，不受外界影响。</span>  &#125;, <span class="hljs-number"><span class="hljs-number">0</span>);&#125;<span class="hljs-comment"><span class="hljs-comment">// 输出结果：</span><span class="hljs-number"><span class="hljs-number">0</span>  <span class="hljs-number"><span class="hljs-number">1</span>  <span class="hljs-number"><span class="hljs-number">2</span>  <span class="hljs-number"><span class="hljs-number">3</span>  <span class="hljs-number"><span class="hljs-number">4</span>  <span class="hljs-number"><span class="hljs-number">5</span>  <span class="hljs-number"><span class="hljs-number">6</span>  <span class="hljs-number"><span class="hljs-number">7</span>  <span class="hljs-number"><span class="hljs-number">8</span> <span class="hljs-number"><span class="hljs-number">9</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre><h1>let没有变量提升与暂时性死区</h1>用let声明的变量，不存在变量提升。而且要求必须 等let声明语句执行完之后，变量才能使用，不然会报Uncaught ReferenceError错误。例如：<pre class="hljs javascript codeblock"><code class="javascript hljs"><span class="hljs-built_in"><span class="hljs-built_in">console</span>.log(aicoder);    <span class="hljs-comment"><span class="hljs-comment">// 错误：Uncaught ReferenceError ...</span><span class="hljs-keyword"><span class="hljs-keyword">let</span> aicoder = <span class="hljs-string"><span class="hljs-string">'aicoder.com'</span>;<span class="hljs-comment"><span class="hljs-comment">// 这里就可以安全使用aicoder</span></span></span></span></span></span></code></pre>ES6 明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。<h1>let变量不能重复声明</h1>let不允许在相同作用域内，重复声明同一个变量。否则报错：Uncaught SyntaxError: Identifier 'XXX' has already been declared例如：<pre class="hljs javascript codeblock"><code class="javascript hljs"><span class="hljs-keyword"><span class="hljs-keyword">let</span> a = <span class="hljs-number"><span class="hljs-number">0</span>;<span class="hljs-keyword"><span class="hljs-keyword">let</span> a = <span class="hljs-string"><span class="hljs-string">'sss'</span>;<span class="hljs-comment"><span class="hljs-comment">// Uncaught SyntaxError: Identifier 'a' has already been declared</span></span></span></span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;ES6 新增了let命令，用来声明局部变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效，而且有暂时性死区的约束。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>vue通信、传值的多种方式</title>
    <link href="http://example.com/2021/05/02/vue%E9%80%9A%E4%BF%A1%E3%80%81%E4%BC%A0%E5%80%BC%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2021/05/02/vue%E9%80%9A%E4%BF%A1%E3%80%81%E4%BC%A0%E5%80%BC%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2021-05-02T09:59:20.000Z</published>
    <updated>2021-05-02T12:17:22.616Z</updated>
    
    <content type="html"><![CDATA[<p>Vue通信、传值的多种方式，详解：<a id="more"></a></p><h1>一、通过路由带参数进行传值</h1><p><span style="color:red">1.两个组件 A和B,A组件通过query把orderId传递给B组件（触发事件可以是点击事件、钩子函数等）</span><br><code class="hljs groovy"><span class="hljs-built_in">this</span>.$router.push(&#123; <span class="hljs-attr">path:</span> <span class="hljs-string">'/conponentsB'</span>, <span class="hljs-attr">query:</span> &#123; <span class="hljs-attr">orderId:</span> <span class="hljs-number">123</span> &#125; &#125;) <span class="hljs-comment">// 跳转到B</span></code></p><p><span style="color:red">2.在B组件中获取A组件传递过来的参数</span><br><code class="hljs kotlin"><span class="hljs-keyword">this</span>.$route.query.orderId</code></p><h1>二、通过设置 Session Storage缓存的形式进行传递</h1><span style="color:red">1.两个组件A和B，在A组件中设置缓存orderData</span><pre class="has" name="code"><code class="hljs javascript"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">const</span> orderData = &#123; <span class="hljs-string">'orderId'</span>: <span class="hljs-number">123</span>, <span class="hljs-string">'price'</span>: <span class="hljs-number">88</span> &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">sessionStorage.setItem(<span class="hljs-string">'缓存名称'</span>, <span class="hljs-built_in">JSON</span>.stringify(orderData))</div></div></li></ol></code><div class="hljs-button signin" data-title="登录后复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.signin(event)"></div></pre><p><span style="color:red">2.B组件就可以获取在A中设置的缓存了</span></p><pre class="has" name="code"><code class="hljs javascript"><span class="hljs-keyword">const</span> dataB = <span class="hljs-built_in">JSON</span>.parse(sessionStorage.getItem(<span class="hljs-string">'缓存名称'</span>))</code><div class="hljs-button signin" data-title="登录后复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.signin(event)"></div></pre><p>此时 dataB 就是数据 orderData</p><p>朋友们可以百度下 Session Storage（程序退出销毁） 和 Local Storage（长期保存） 的区别。</p><h1>三、父子组件之间的传值</h1><h2>（一）父组件往子组件传值props</h2><span style="color:red">1.定义父组件，父组件传递 number这个数值给子组件，如果传递的参数很多，推荐使用json数组{}的形式</span><p><img src="/2021/05/02/vue%E9%80%9A%E4%BF%A1%E3%80%81%E4%BC%A0%E5%80%BC%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F/vue%E4%BC%A0%E5%80%BC%E6%96%B9%E5%BC%8F01.jpg" alt="vue传值"></p><p><span style="color:red">2.定义子组件，子组件通过 props方法获取父组件传递过来的值。props中可以定义能接收的数据类型，如果不符合会报错。</span></p><p><img src="/2021/05/02/vue%E9%80%9A%E4%BF%A1%E3%80%81%E4%BC%A0%E5%80%BC%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F/vue%E4%BC%A0%E5%80%BC%E6%96%B9%E5%BC%8F02.jpg" alt="vue传值"></p><p>当然也可以简单一点，如果不考虑数据类型，直接 props:[“number”,”string”]就可以了,中括号包裹，多个值使用，分隔。</p><p><span style="color:red">3.假如接收的参数 是动态的，比如 input输入的内容 v-model的形式</span><br>注意：传递的参数名称 支持驼峰命名，下图 描述不正确（1.0是不支持的）</p><p><img src="/2021/05/02/vue%E9%80%9A%E4%BF%A1%E3%80%81%E4%BC%A0%E5%80%BC%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F/vue%E4%BC%A0%E5%80%BC%E6%96%B9%E5%BC%8F04.jpg" alt="vue传值"></p><p><img src="/2021/05/02/vue%E9%80%9A%E4%BF%A1%E3%80%81%E4%BC%A0%E5%80%BC%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F/vue%E4%BC%A0%E5%80%BC%E6%96%B9%E5%BC%8F03.jpg" alt="vue传值"></p><p><span style="color:red">4.父子组件传值，数据是异步请求，有可能数据渲染时报错</span></p><p>原因：异步请求时，数据还没有获取到但是此时已经渲染节点了</p><p>解决方案：可以在 父组件需要传递数据的节点加上  v-if = false，异步请求获取数据后，v-if = true</p><h2>（二）、子组件往父组件传值，通过emit事件</h2><p><img src="/2021/05/02/vue%E9%80%9A%E4%BF%A1%E3%80%81%E4%BC%A0%E5%80%BC%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F/vue%E4%BC%A0%E5%80%BC%E6%96%B9%E5%BC%8F05.jpg" alt="vue传值"></p><p><img src="/2021/05/02/vue%E9%80%9A%E4%BF%A1%E3%80%81%E4%BC%A0%E5%80%BC%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F/vue%E4%BC%A0%E5%80%BC%E6%96%B9%E5%BC%8F06.jpg" alt="vue传值"></p><h1>四、不同组件之间传值，通过eventBus（小项目少页面用eventBus，大项目多页面使用 vuex）</h1><h2>(一)定义一个新的vue实例专门用于传递数据，并导出</h2><p><img src="/2021/05/02/vue%E9%80%9A%E4%BF%A1%E3%80%81%E4%BC%A0%E5%80%BC%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F/vue%E4%BC%A0%E5%80%BC%E6%96%B9%E5%BC%8F08.jpg" alt="vue传值"></p><h2>(二)定义传递的方法名和传输内容，点击事件或钩子函数触发eventBus.emit事件</h2><p><img src="/2021/05/02/vue%E9%80%9A%E4%BF%A1%E3%80%81%E4%BC%A0%E5%80%BC%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F/vue%E4%BC%A0%E5%80%BC%E6%96%B9%E5%BC%8F07.jpg" alt="vue传值"></p><h2>(三)接收传递过来的数据</h2>注意：enentBus是一个另一个新的Vue实例，区分两个this所代表得vue实例<p><img src="/2021/05/02/vue%E9%80%9A%E4%BF%A1%E3%80%81%E4%BC%A0%E5%80%BC%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F/vue%E4%BC%A0%E5%80%BC%E6%96%B9%E5%BC%8F09.png" alt="vue传值"></p><h1>五、vuex进行传值</h1>为什么使用vuex?vuex主要是是做数据交互，父子组件传值可以很容易办到，但是兄弟组件间传值（兄弟组件下又有父子组件），或者大型spa单页面框架项目，页面多并且一层嵌套一层的传值，异常麻烦，用vuex来维护共有的状态或数据会显得得心应手。<p>需求：两个组件A和B，vuex维护的公共数据是 餐馆的名称 resturantName,默认餐馆名称是 飞歌餐馆，那么现在A和B页面显示的就是飞歌餐馆。如果A修改餐馆名称 为 A餐馆，则B页面显示的将会是 A餐馆，反之B修改同理。这就是vuex维护公共状态或数据的魅力，在一个地方修改了数据，在这个项目的其他页面都会变成这个数据。<br><img src="/2021/05/02/vue%E9%80%9A%E4%BF%A1%E3%80%81%E4%BC%A0%E5%80%BC%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F/vue%E4%BC%A0%E5%80%BC%E6%96%B9%E5%BC%8F10.png" alt="vue传值"> </p><p><img src="/2021/05/02/vue%E9%80%9A%E4%BF%A1%E3%80%81%E4%BC%A0%E5%80%BC%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F/vue%E4%BC%A0%E5%80%BC%E6%96%B9%E5%BC%8F11.png" alt="vue传值"></p><h2>(一)使用 vue-cli脚手架工具创建一个工程项目，工程目录，创建组件A和组件B路由如下：</h2><p><img src="/2021/05/02/vue%E9%80%9A%E4%BF%A1%E3%80%81%E4%BC%A0%E5%80%BC%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F/vue%E4%BC%A0%E5%80%BC%E6%96%B9%E5%BC%8F12.png" alt="vue传值"></p><p>路由如下：</p><pre class="has" name="code"><code class="language-html hljs xml"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">import Vue from 'vue'</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">import Router from 'vue-router'</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">import componentsA from '@/components/componentsA'</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">import componentsB from '@/components/componentsB'</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">Vue.use(Router)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">export default new Router(&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   mode: 'history',</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    routes: [</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        path: '/',</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        name: 'componentsA',</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        component: componentsA</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        &#125;,</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            path: '/componentsA',</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            name: 'componentsA',</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            component: componentsA</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        &#125;,</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            path: '/componentsB',</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            name: 'componentsB',</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            component: componentsB</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    ]</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&#125;)</div></div></li></ol></code><div class="hljs-button signin" data-title="登录后复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.signin(event)"></div></pre><p>app.vue：</p><pre class="has" name="code"><code class="language-html hljs xml"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-attr">name</span>: <span class="hljs-string">'App'</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-selector-id">#app</span> &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">'Avenir'</span>, Helvetica, Arial, sans-serif;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-attribute">-webkit-font-smoothing</span>: antialiased;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-attribute">-moz-osx-font-smoothing</span>: grayscale;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-attribute">text-align</span>: center;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#2c3e50</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">60px</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></div></div></li></ol></code><div class="hljs-button signin" data-title="登录后复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.signin(event)"></div></pre><h2>(二)开始使用vuex，新建一个 sotre文件夹，分开维护 actions mutations getters</h2><p><img src="/2021/05/02/vue%E9%80%9A%E4%BF%A1%E3%80%81%E4%BC%A0%E5%80%BC%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F/vue%E4%BC%A0%E5%80%BC%E6%96%B9%E5%BC%8F13.png" alt="vue传值"></p><h2>(三)在store/index.js文件中新建vuex 的store实例</h2>*as的意思是 导入这个文件里面的所有内容，就不用一个个实例来导入了。<pre class="has" name="code"><code class="language-html hljs xml"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">import Vue from 'vue'</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">import Vuex from 'vuex'</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">import * as getters from './getters' // 导入响应的模块，*相当于引入了这个组件下所有导出的事例</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">import * as actions from './actions'</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">import * as mutations from './mutations'</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">Vue.use(Vuex)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">// 首先声明一个需要全局维护的状态 state,比如 我这里举例的resturantName</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">const state = &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    resturantName: '飞歌餐馆' // 默认值</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    // id: xxx  如果还有全局状态也可以在这里添加</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    // name:xxx</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">// 注册上面引入的各大模块</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">const store = new Vuex.Store(&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    state,    // 共同维护的一个状态，state里面可以是很多个全局状态</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    getters,  // 获取数据并渲染</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    actions,  // 数据的异步操作</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    mutations  // 处理数据的唯一途径，state的改变或赋值只能在这里</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&#125;)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">export default store  // 导出store并在 main.js中引用注册。</div></div></li></ol></code><div class="hljs-button signin" data-title="登录后复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.signin(event)"></div></pre><h2>(四)actions</h2><pre class="has" name="code"><code class="language-html hljs xml"><ol class="hljs-ln" style="width:907px"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">// 给action注册事件处理函数。当这个函数被触发时候，将状态提交到mutations中处理</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">export function modifyAName(&#123;commit&#125;, name) &#123; // commit 提交；name即为点击后传递过来的参数，此时是 'A餐馆'</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    return commit ('modifyAName', name)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">export function modifyBName(&#123;commit&#125;, name) &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    return commit ('modifyBName', name)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">// ES6精简写法</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">// export const modifyAName = (&#123;commit&#125;,name) =&gt; commit('modifyAName', name)</div></div></li></ol></code><div class="hljs-button signin" data-title="登录后复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.signin(event)"></div></pre><h2>(五)mutations</h2><pre class="has" name="code"><code class="language-html hljs xml"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">// 提交 mutations是更改Vuex状态的唯一合法方法</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">export const modifyAName = (state, name) =&gt; &#123; // A组件点击更改餐馆名称为 A餐馆</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    state.resturantName = name // 把方法传递过来的参数，赋值给state中的resturantName</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">export const modifyBName = (state, name) =&gt; &#123; // B组件点击更改餐馆名称为 B餐馆</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    state.resturantName = name</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&#125;</div></div></li></ol></code><div class="hljs-button signin" data-title="登录后复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.signin(event)"></div></pre><h2>(六)getters</h2><pre class="has" name="code"><code class="language-html hljs xml"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">// 获取最终的状态信息</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">export const resturantName = state =&gt; state.resturantName</div></div></li></ol></code><div class="hljs-button signin" data-title="登录后复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.signin(event)"></div></pre><h2>(七)在main.js中导入 store实例</h2><pre class="has" name="code"><code class="language-html hljs xml"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">// The Vue build version to load with the `import` command</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">import Vue from 'vue'</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">import App from './App'</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">import router from './router'</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">import store from './store'</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">Vue.config.productionTip = false</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">/* eslint-disable no-new */</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">new Vue(&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  el: '#app',</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  router,</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  store,  // 这样就能全局使用vuex了</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  components: &#123; App &#125;,</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  template: '<span class="hljs-tag">&lt;<span class="hljs-name">App</span>/&gt;</span>'</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&#125;)</div></div></li></ol></code><div class="hljs-button signin" data-title="登录后复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.signin(event)"></div></pre><h2>(八)在组件A中，定义点击事件，点击 修改 餐馆的名称，并把餐馆的名称在事件中用参数进行传递。</h2>...mapactions 和 ...mapgetters都是vuex提供的语法糖，在底层已经封装好了，拿来就能用，简化了很多操作。<p>其中…mapActions([‘clickAFn’]) 相当于this.$store.dispatch(‘clickAFn’，{参数})，mapActions中只需要指定方法名即可，参数省略。</p><p>…mapGetters([‘resturantName’])相当于this.$store.getters.resturantName</p><pre class="has" name="code"><code class="language-html hljs xml"><ol class="hljs-ln" style="width:846px"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"componentsA"</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;<span class="hljs-name">P</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span>&gt;</span>组件A<span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;<span class="hljs-name">P</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"titleName"</span>&gt;</span>餐馆名称：&#123;&#123;resturantName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-comment">&lt;!-- 点击修改 为 A 餐馆 --&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"modifyAName('A餐馆')"</span>&gt;</span>修改为A餐馆<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"marTop"</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"trunToB"</span>&gt;</span>跳转到B页面<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> &#123;mapActions, mapGetters&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'vuex'</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-attr">name</span>: <span class="hljs-string">'A'</span>,</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  data () &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">return</span> &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  &#125;,</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-attr">methods</span>:&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      ...mapActions( <span class="hljs-comment">// 语法糖</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">          [<span class="hljs-string">'modifyAName'</span>] <span class="hljs-comment">// 相当于this.$store.dispatch('modifyName'),提交这个方法</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      ),</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      trunToB () &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">          <span class="hljs-built_in">this</span>.$router.push(&#123;<span class="hljs-attr">path</span>: <span class="hljs-string">'/componentsB'</span>&#125;) <span class="hljs-comment">// 路由跳转到B</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  &#125;,</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-attr">computed</span>: &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      ...mapGetters([<span class="hljs-string">'resturantName'</span>]) <span class="hljs-comment">// 动态计算属性，相当于this.$store.getters.resturantName</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">&lt;!-- Add "scoped" attribute to limit CSS to this component only --&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-selector-class">.title</span>,<span class="hljs-selector-class">.titleName</span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-attribute">color</span>: blue;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="41"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="43"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-selector-class">.btn</span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-attribute">width</span>: <span class="hljs-number">160px</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="45"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="46"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-attribute">background-color</span>: blue;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="47"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-attribute">border</span>: none;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="48"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-attribute">outline</span>: none;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="49"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#ffffff</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="50"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="51"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="52"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-selector-class">.marTop</span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="53"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="54"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="55"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></div></div></li></ol></code><div class="hljs-button signin" data-title="登录后复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.signin(event)"></div></pre><p> B组件同理<br> <pre class="has" name="code"><code class="language-html hljs xml"><ol class="hljs-ln" style="width:846px"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"componentsB"</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;<span class="hljs-name">P</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span>&gt;</span>组件B<span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;<span class="hljs-name">P</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"titleName"</span>&gt;</span>餐馆名称：&#123;&#123;resturantName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">          <span class="hljs-comment">&lt;!-- 点击修改 为 B 餐馆 --&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"modifyBName('B餐馆')"</span>&gt;</span>修改为B餐馆<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"marTop"</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"trunToA"</span>&gt;</span>跳转到A页面<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> &#123;mapActions, mapGetters&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'vuex'</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-attr">name</span>: <span class="hljs-string">'B'</span>,</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  data () &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">return</span> &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  &#125;,</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-attr">methods</span>:&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      ...mapActions( <span class="hljs-comment">// 语法糖</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">          [<span class="hljs-string">'modifyBName'</span>] <span class="hljs-comment">// 相当于this.$store.dispatch('modifyName'),提交这个方法</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      ),</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      trunToA () &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">          <span class="hljs-built_in">this</span>.$router.push(&#123;<span class="hljs-attr">path</span>: <span class="hljs-string">'/componentsA'</span>&#125;) <span class="hljs-comment">// 路由跳转到A</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  &#125;,</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-attr">computed</span>: &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      ...mapGetters([<span class="hljs-string">'resturantName'</span>]) <span class="hljs-comment">// 动态计算属性，相当于this.$store.getters.resturantName</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">&lt;!-- Add "scoped" attribute to limit CSS to this component only --&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-selector-class">.title</span>,<span class="hljs-selector-class">.titleName</span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-attribute">color</span>: red;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="41"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="43"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-selector-class">.btn</span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-attribute">width</span>: <span class="hljs-number">160px</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="45"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="46"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-attribute">background-color</span>: red;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="47"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-attribute">border</span>: none;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="48"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-attribute">outline</span>: none;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="49"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#ffffff</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="50"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="51"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="52"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-selector-class">.marTop</span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="53"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="54"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="55"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></div></div></li></ol></code><div class="hljs-button signin" data-title="登录后复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.signin(event)"></div></pre></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Vue通信、传值的多种方式，详解：&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>vue中mode hash 和 history的区别</title>
    <link href="http://example.com/2021/04/09/vue%E4%B8%ADmode-hash-%E5%92%8C-history%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2021/04/09/vue%E4%B8%ADmode-hash-%E5%92%8C-history%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2021-04-09T07:58:53.000Z</published>
    <updated>2021-04-09T08:39:32.406Z</updated>
    
    <content type="html"><![CDATA[<p>对于 Vue 这类渐进式前端开发框架，为了构建 SPA（单页面应用），需要引入前端路由系统，这也就是 Vue-Router 存在的意义。前端路由的核心，就在于 —— 改变视图的同时不会向后端发出请求。<a id="more"></a></p><p>为了达到这一目的，浏览器当前提供了以下两种支持：</p><p>1.hash —— 即地址栏 URL 中的 # 符号（此 hash 不是密码学里的散列运算）。<br>比如这个 URL：<a href="http://www.abc.com/#/hello%EF%BC%8Chash">http://www.abc.com/#/hello，hash</a> 的值为 #/hello。它的特点在于：hash 虽然出现在 URL 中，但不会被包括在 HTTP 请求中，对后端完全没有影响，因此改变 hash 不会重新加载页面。<br>2.history —— 利用了 HTML5 History Interface 中新增的 pushState() 和 replaceState() 方法。（需要特定浏览器支持）<br>这两个方法应用于浏览器的历史记录栈，在当前已有的 back、forward、go 的基础之上，它们提供了对历史记录进行修改的功能。只是当它们执行修改时，虽然改变了当前的 URL，但浏览器不会立即向后端发送请求。<br>————————————————</p><p>因此可以说，hash 模式和 history 模式都属于浏览器自身的特性，Vue-Router 只是利用了这两个特性（通过调用浏览器提供的接口）来实现前端路由。</p><p>使用场景</p><p>一般场景下，hash 和 history 都可以，除非你更在意颜值，# 符号夹杂在 URL 里看起来确实有些不太美丽。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;对于 Vue 这类渐进式前端开发框架，为了构建 SPA（单页面应用），需要引入前端路由系统，这也就是 Vue-Router 存在的意义。前端路由的核心，就在于 —— 改变视图的同时不会向后端发出请求。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>蔬菜生活录07</title>
    <link href="http://example.com/2021/04/08/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%9507/"/>
    <id>http://example.com/2021/04/08/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%9507/</id>
    <published>2021-04-08T13:53:52.000Z</published>
    <updated>2021-04-08T14:00:45.167Z</updated>
    
    <content type="html"><![CDATA[<p>2020.11.25-2021.4.8</p><p>实习结束了。</p><a id="more"></a><p>这段时间认识了挺多朋友，<br><img src="/2021/04/08/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%9507/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%9507.jpg" alt="蔬菜生活录07"><br>也学习到了很多东西。</p><p>其实，挺舍不得的，</p><p>但，真的很高兴认识你们。</p><p>同时，</p><p>也让自己更加有了坚定的目标。</p><p>接下来的时间，</p><p>绝对不能懒惰，<br><img src="/2021/04/08/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%9507/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%9507_1.jpg" alt="蔬菜生活录07"><br>要努力提升自己。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2020.11.25-2021.4.8&lt;/p&gt;
&lt;p&gt;实习结束了。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>蔬菜生活录06</title>
    <link href="http://example.com/2021/03/29/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%9506/"/>
    <id>http://example.com/2021/03/29/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%9506/</id>
    <published>2021-03-29T13:27:48.000Z</published>
    <updated>2021-03-29T14:41:20.348Z</updated>
    
    <content type="html"><![CDATA[<p>2021.3.29 天气：晴  </p><a id="more"></a><p>今天是去健身房的第十三天。</p><p>之前对于健身没有太多的兴趣，但是现在逐渐地喜欢上了健身。</p><p>每天下班过后，吃完晚饭都会跑去健身房，一呆就是2个小时。</p><p>这几天有点特别，是个独特的日子。</p><p>家里老姐要出嫁了</p><p>犹记得，</p><p>打小到现在，</p><p>一直都是老姐们在顾着我，</p><p>他们就像在你人生的道路上为你探路一样，</p><p>我就在他们的宠爱和包容下长大，</p><p>如今，当真正看到她终于要嫁人了，</p><p>才忽然惊醒</p><p>原来我们都已经长大了</p><p>那些小时候的画面，</p><p>一起为了抢遥控器而抢来抢去。</p><p>让我记忆最深刻的，</p><p>是小时候读小学的时候，</p><p>那小学的厕所都在偏僻的地方</p><p>我要上厕所的时候，</p><p>就跑去老姐的班级，</p><p>叫上老姐陪我一起去，</p><p>她在外面的阶梯上坐着等我，</p><p>而我就蹲在离厕所大门最近的地方，</p><p>探一探头，就能看到外面老姐在外面，</p><p>手里拿着芦苇，悠闲地坐着。</p><p>也记得，</p><p>那时候我被欺负了，</p><p>老姐跑到我的班级来安慰我，</p><p>我在桌子上哭，</p><p>老姐站在一边，</p><p>双眼也红了眶。</p><p>这些回忆，</p><p>现在想起，</p><p>仍像昨天。<br><img src="/2021/03/29/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%9506/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%9506.jpg" alt="蔬菜生活录06"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2021.3.29 天气：晴  &lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>js十大经典算法（下）</title>
    <link href="http://example.com/2021/03/18/js%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>http://example.com/2021/03/18/js%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%8B%EF%BC%89/</id>
    <published>2021-03-18T02:53:35.000Z</published>
    <updated>2021-03-18T03:10:15.797Z</updated>
    
    <content type="html"><![CDATA[<p>排序算法的作用：<br>如果你做数据处理，这个数据有恰好是有序的，这时候排序的功底就能帮你快速合并多个有序数据；如果这个数据量太大，你需要画图展现，那么你就需要建立一个索引来处理；如果在你的图像需要和鼠标交互，那么你二维的点需要一个状态管理起来，这时候就要用到多边形包含点的判断……这些场景都是需要手动排序的，sort()不一定能解决</p><a id="more"></a><p><span style="color:red">快速排序（Quick Sort）</span><br><br>快速排序须知：<br>又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。<br>快速排序的名字起的是简单粗暴，因为一听到这个名字你就知道它存在的意义，就是快，而且效率高! 它是处理大数据最快的排序算法之一了。虽然Worst Case的时间复杂度达到了O(n²)，但是人家就是优秀，在大多数情况下都比平均时间复杂度为O(n log n) 的排序算法表现要更好，可是这是为什么呢，我也不知道。。。好在我的强迫症又犯了，查了N多资料终于在《算法艺术与信息学竞赛》上找到了满意的答案：</p><p>快速排序的最坏运行情况是O(n²)，比如说顺序数列的快排。但它的平摊期望时间是O(n log n) ，且O(n log n)记号中隐含的常数因子很小，比复杂度稳定等于O(n log n)的归并排序要小很多。所以，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序。</p><p>更新：<br>《算法 第四版》里对于快速排序的优缺点进行了更加明确的解释：</p><p>快速排序的内循环比大多数排序算法都要短小，这意味着它无论是在理论上还是在实际中都要更快。它的主要缺点是非常脆弱，在实现时要非常小心才能避免低劣的性能。</p><p>快速排序JavaScript代码实现：</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> quickSort(arr, left, right) {</span><span style="color: rgba(0, 128, 128, 1)"> 2</span>     <span style="color: rgba(0, 0, 255, 1)">var</span> len =<span style="color: rgba(0, 0, 0, 1)"> arr.length,</span><span style="color: rgba(0, 128, 128, 1)"> 3</span> <span style="color: rgba(0, 0, 0, 1)">        partitionIndex,</span><span style="color: rgba(0, 128, 128, 1)"> 4</span>         left = <span style="color: rgba(0, 0, 255, 1)">typeof</span> left != 'number' ? 0<span style="color: rgba(0, 0, 0, 1)"> : left,</span><span style="color: rgba(0, 128, 128, 1)"> 5</span>         right = <span style="color: rgba(0, 0, 255, 1)">typeof</span> right != 'number' ? len - 1<span style="color: rgba(0, 0, 0, 1)"> : right;</span><span style="color: rgba(0, 128, 128, 1)"> 6</span> <span style="color: rgba(0, 128, 128, 1)"> 7</span>     <span style="color: rgba(0, 0, 255, 1)">if</span> (left &lt;<span style="color: rgba(0, 0, 0, 1)"> right) {</span><span style="color: rgba(0, 128, 128, 1)"> 8</span>         partitionIndex =<span style="color: rgba(0, 0, 0, 1)"> partition(arr, left, right);</span><span style="color: rgba(0, 128, 128, 1)"> 9</span>         quickSort(arr, left, partitionIndex-1<span style="color: rgba(0, 0, 0, 1)">);</span><span style="color: rgba(0, 128, 128, 1)">10</span>         quickSort(arr, partitionIndex+1<span style="color: rgba(0, 0, 0, 1)">, right);</span><span style="color: rgba(0, 128, 128, 1)">11</span> <span style="color: rgba(0, 0, 0, 1)">    }</span><span style="color: rgba(0, 128, 128, 1)">12</span>     <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> arr;</span><span style="color: rgba(0, 128, 128, 1)">13</span> <span style="color: rgba(0, 0, 0, 1)">}</span><span style="color: rgba(0, 128, 128, 1)">14</span> <span style="color: rgba(0, 128, 128, 1)">15</span> <span style="color: rgba(0, 0, 255, 1)">function</span> partition(arr, left ,right) {     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">分区操作</span><span style="color: rgba(0, 128, 128, 1)">16</span>     <span style="color: rgba(0, 0, 255, 1)">var</span> pivot = left,                      <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">设定基准值（pivot）</span><span style="color: rgba(0, 128, 128, 1)">17</span>         index = pivot + 1<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 128, 128, 1)">18</span>     <span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> i = index; i &lt;= right; i++<span style="color: rgba(0, 0, 0, 1)">) {</span><span style="color: rgba(0, 128, 128, 1)">19</span>         <span style="color: rgba(0, 0, 255, 1)">if</span> (arr[i] &lt;<span style="color: rgba(0, 0, 0, 1)"> arr[pivot]) {</span><span style="color: rgba(0, 128, 128, 1)">20</span> <span style="color: rgba(0, 0, 0, 1)">            swap(arr, i, index);</span><span style="color: rgba(0, 128, 128, 1)">21</span>             index++<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 128, 128, 1)">22</span> <span style="color: rgba(0, 0, 0, 1)">        }        </span><span style="color: rgba(0, 128, 128, 1)">23</span> <span style="color: rgba(0, 0, 0, 1)">    }</span><span style="color: rgba(0, 128, 128, 1)">24</span>     swap(arr, pivot, index - 1<span style="color: rgba(0, 0, 0, 1)">);</span><span style="color: rgba(0, 128, 128, 1)">25</span>     <span style="color: rgba(0, 0, 255, 1)">return</span> index-1<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 128, 128, 1)">26</span> <span style="color: rgba(0, 0, 0, 1)">}</span><span style="color: rgba(0, 128, 128, 1)">27</span> <span style="color: rgba(0, 128, 128, 1)">28</span> <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> swap(arr, i, j) {</span><span style="color: rgba(0, 128, 128, 1)">29</span>     <span style="color: rgba(0, 0, 255, 1)">var</span> temp =<span style="color: rgba(0, 0, 0, 1)"> arr[i];</span><span style="color: rgba(0, 128, 128, 1)">30</span>     arr[i] =<span style="color: rgba(0, 0, 0, 1)"> arr[j];</span><span style="color: rgba(0, 128, 128, 1)">31</span>     arr[j] =<span style="color: rgba(0, 0, 0, 1)"> temp;</span><span style="color: rgba(0, 128, 128, 1)">32</span> }</pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><span style="color:red">堆排序（Heap Sort）</span><br>堆排序须知：堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：<pre><code>大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列</code></pre><p>堆排序JavaScript代码实现：</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> <span style="color: rgba(0, 0, 255, 1)">var</span> len;    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">因为声明的多个函数都需要数据长度，所以把len设置成为全局变量</span><span style="color: rgba(0, 128, 128, 1)"> 2</span> <span style="color: rgba(0, 128, 128, 1)"> 3</span> <span style="color: rgba(0, 0, 255, 1)">function</span> buildMaxHeap(arr) {   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">建立大顶堆</span><span style="color: rgba(0, 128, 128, 1)"> 4</span>     len =<span style="color: rgba(0, 0, 0, 1)"> arr.length;</span><span style="color: rgba(0, 128, 128, 1)"> 5</span>     <span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> i = Math.floor(len/2); i &amp;gt;= 0; i--) {<span style="color: rgba(0, 128, 128, 1)"> 6</span> <span style="color: rgba(0, 0, 0, 1)">        heapify(arr, i);</span><span style="color: rgba(0, 128, 128, 1)"> 7</span> <span style="color: rgba(0, 0, 0, 1)">    }</span><span style="color: rgba(0, 128, 128, 1)"> 8</span> <span style="color: rgba(0, 0, 0, 1)">}</span><span style="color: rgba(0, 128, 128, 1)"> 9</span> <span style="color: rgba(0, 128, 128, 1)">10</span> <span style="color: rgba(0, 0, 255, 1)">function</span> heapify(arr, i) {     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">堆调整</span><span style="color: rgba(0, 128, 128, 1)">11</span>     <span style="color: rgba(0, 0, 255, 1)">var</span> left = 2 * i + 1<span style="color: rgba(0, 0, 0, 1)">,</span><span style="color: rgba(0, 128, 128, 1)">12</span>         right = 2 * i + 2<span style="color: rgba(0, 0, 0, 1)">,</span><span style="color: rgba(0, 128, 128, 1)">13</span>         largest =<span style="color: rgba(0, 0, 0, 1)"> i;</span><span style="color: rgba(0, 128, 128, 1)">14</span> <span style="color: rgba(0, 128, 128, 1)">15</span>     <span style="color: rgba(0, 0, 255, 1)">if</span> (left &lt; len &amp;&amp; arr[left] &gt;<span style="color: rgba(0, 0, 0, 1)"> arr[largest]) {</span><span style="color: rgba(0, 128, 128, 1)">16</span>         largest =<span style="color: rgba(0, 0, 0, 1)"> left;</span><span style="color: rgba(0, 128, 128, 1)">17</span> <span style="color: rgba(0, 0, 0, 1)">    }</span><span style="color: rgba(0, 128, 128, 1)">18</span> <span style="color: rgba(0, 128, 128, 1)">19</span>     <span style="color: rgba(0, 0, 255, 1)">if</span> (right &lt; len &amp;&amp; arr[right] &gt;<span style="color: rgba(0, 0, 0, 1)"> arr[largest]) {</span><span style="color: rgba(0, 128, 128, 1)">20</span>         largest =<span style="color: rgba(0, 0, 0, 1)"> right;</span><span style="color: rgba(0, 128, 128, 1)">21</span> <span style="color: rgba(0, 0, 0, 1)">    }</span><span style="color: rgba(0, 128, 128, 1)">22</span> <span style="color: rgba(0, 128, 128, 1)">23</span>     <span style="color: rgba(0, 0, 255, 1)">if</span> (largest !=<span style="color: rgba(0, 0, 0, 1)"> i) {</span><span style="color: rgba(0, 128, 128, 1)">24</span> <span style="color: rgba(0, 0, 0, 1)">        swap(arr, i, largest);</span><span style="color: rgba(0, 128, 128, 1)">25</span> <span style="color: rgba(0, 0, 0, 1)">        heapify(arr, largest);</span><span style="color: rgba(0, 128, 128, 1)">26</span> <span style="color: rgba(0, 0, 0, 1)">    }</span><span style="color: rgba(0, 128, 128, 1)">27</span> <span style="color: rgba(0, 0, 0, 1)">}</span><span style="color: rgba(0, 128, 128, 1)">28</span> <span style="color: rgba(0, 128, 128, 1)">29</span> <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> swap(arr, i, j) {</span><span style="color: rgba(0, 128, 128, 1)">30</span>     <span style="color: rgba(0, 0, 255, 1)">var</span> temp =<span style="color: rgba(0, 0, 0, 1)"> arr[i];</span><span style="color: rgba(0, 128, 128, 1)">31</span>     arr[i] =<span style="color: rgba(0, 0, 0, 1)"> arr[j];</span><span style="color: rgba(0, 128, 128, 1)">32</span>     arr[j] =<span style="color: rgba(0, 0, 0, 1)"> temp;</span><span style="color: rgba(0, 128, 128, 1)">33</span> <span style="color: rgba(0, 0, 0, 1)">}</span><span style="color: rgba(0, 128, 128, 1)">34</span> <span style="color: rgba(0, 128, 128, 1)">35</span> <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> heapSort(arr) {</span><span style="color: rgba(0, 128, 128, 1)">36</span> <span style="color: rgba(0, 0, 0, 1)">    buildMaxHeap(arr);</span><span style="color: rgba(0, 128, 128, 1)">37</span> <span style="color: rgba(0, 128, 128, 1)">38</span>     <span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> i = arr.length-1; i &gt; 0; i--<span style="color: rgba(0, 0, 0, 1)">) {</span><span style="color: rgba(0, 128, 128, 1)">39</span>         swap(arr, 0<span style="color: rgba(0, 0, 0, 1)">, i);</span><span style="color: rgba(0, 128, 128, 1)">40</span>         len--<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 128, 128, 1)">41</span>         heapify(arr, 0<span style="color: rgba(0, 0, 0, 1)">);</span><span style="color: rgba(0, 128, 128, 1)">42</span> <span style="color: rgba(0, 0, 0, 1)">    }</span><span style="color: rgba(0, 128, 128, 1)">43</span>     <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> arr;</span><span style="color: rgba(0, 128, 128, 1)">44</span> }</pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><span style="color:red">计数排序（Counting Sort）</span><br>计数排序须知：计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。<p>计数排序JavaScript代码实现：</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> countingSort(arr, maxValue) {</span><span style="color: rgba(0, 128, 128, 1)"> 2</span>     <span style="color: rgba(0, 0, 255, 1)">var</span> bucket = <span style="color: rgba(0, 0, 255, 1)">new</span> Array(maxValue+1<span style="color: rgba(0, 0, 0, 1)">),</span><span style="color: rgba(0, 128, 128, 1)"> 3</span>         sortedIndex = 0<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 128, 128, 1)"> 4</span>         arrLen =<span style="color: rgba(0, 0, 0, 1)"> arr.length,</span><span style="color: rgba(0, 128, 128, 1)"> 5</span>         bucketLen = maxValue + 1<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 128, 128, 1)"> 6</span> <span style="color: rgba(0, 128, 128, 1)"> 7</span>     <span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> i = 0; i &lt; arrLen; i++<span style="color: rgba(0, 0, 0, 1)">) {</span><span style="color: rgba(0, 128, 128, 1)"> 8</span>         <span style="color: rgba(0, 0, 255, 1)">if</span> (!<span style="color: rgba(0, 0, 0, 1)">bucket[arr[i]]) {</span><span style="color: rgba(0, 128, 128, 1)"> 9</span>             bucket[arr[i]] = 0<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 128, 128, 1)">10</span> <span style="color: rgba(0, 0, 0, 1)">        }</span><span style="color: rgba(0, 128, 128, 1)">11</span>         bucket[arr[i]]++<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 128, 128, 1)">12</span> <span style="color: rgba(0, 0, 0, 1)">    }</span><span style="color: rgba(0, 128, 128, 1)">13</span> <span style="color: rgba(0, 128, 128, 1)">14</span>     <span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> j = 0; j &lt; bucketLen; j++<span style="color: rgba(0, 0, 0, 1)">) {</span><span style="color: rgba(0, 128, 128, 1)">15</span>         <span style="color: rgba(0, 0, 255, 1)">while</span>(bucket[j] &gt; 0<span style="color: rgba(0, 0, 0, 1)">) {</span><span style="color: rgba(0, 128, 128, 1)">16</span>             arr[sortedIndex++] =<span style="color: rgba(0, 0, 0, 1)"> j;</span><span style="color: rgba(0, 128, 128, 1)">17</span>             bucket[j]--<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 128, 128, 1)">18</span> <span style="color: rgba(0, 0, 0, 1)">        }</span><span style="color: rgba(0, 128, 128, 1)">19</span> <span style="color: rgba(0, 0, 0, 1)">    }</span><span style="color: rgba(0, 128, 128, 1)">20</span> <span style="color: rgba(0, 128, 128, 1)">21</span>     <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> arr;</span><span style="color: rgba(0, 128, 128, 1)">22</span> }</pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><span style="color:red">桶排序（Bucket Sort）</span><br>桶排序须知：桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：<p>在额外空间充足的情况下，尽量增大桶的数量<br>使用的映射函数能够将输入的N个数据均匀的分配到K个桶中<br>同时，对于桶中元素的排序，选择何种比较排序算法对于性能的影响至关重要。</p><p>什么时候最快（Best Cases）：<br>当输入的数据可以均匀的分配到每一个桶中</p><p>什么时候最慢（Worst Cases）：<br>当输入的数据被分配到了同一个桶中</p><p>桶排序JavaScript代码实现：</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> bucketSort(arr, bucketSize) {</span><span style="color: rgba(0, 128, 128, 1)"> 2</span>     <span style="color: rgba(0, 0, 255, 1)">if</span> (arr.length === 0<span style="color: rgba(0, 0, 0, 1)">) {</span><span style="color: rgba(0, 128, 128, 1)"> 3</span>       <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> arr;</span><span style="color: rgba(0, 128, 128, 1)"> 4</span> <span style="color: rgba(0, 0, 0, 1)">    }</span><span style="color: rgba(0, 128, 128, 1)"> 5</span> <span style="color: rgba(0, 128, 128, 1)"> 6</span>     <span style="color: rgba(0, 0, 255, 1)">var</span><span style="color: rgba(0, 0, 0, 1)"> i;</span><span style="color: rgba(0, 128, 128, 1)"> 7</span>     <span style="color: rgba(0, 0, 255, 1)">var</span> minValue = arr[0<span style="color: rgba(0, 0, 0, 1)">];</span><span style="color: rgba(0, 128, 128, 1)"> 8</span>     <span style="color: rgba(0, 0, 255, 1)">var</span> maxValue = arr[0<span style="color: rgba(0, 0, 0, 1)">];</span><span style="color: rgba(0, 128, 128, 1)"> 9</span>     <span style="color: rgba(0, 0, 255, 1)">for</span> (i = 1; i &lt; arr.length; i++<span style="color: rgba(0, 0, 0, 1)">) {</span><span style="color: rgba(0, 128, 128, 1)">10</span>       <span style="color: rgba(0, 0, 255, 1)">if</span> (arr[i] &lt;<span style="color: rgba(0, 0, 0, 1)"> minValue) {</span><span style="color: rgba(0, 128, 128, 1)">11</span>           minValue = arr[i];                <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">输入数据的最小值</span><span style="color: rgba(0, 128, 128, 1)">12</span>       } <span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span> (arr[i] &gt;<span style="color: rgba(0, 0, 0, 1)"> maxValue) {</span><span style="color: rgba(0, 128, 128, 1)">13</span>           maxValue = arr[i];                <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">输入数据的最大值</span><span style="color: rgba(0, 128, 128, 1)">14</span> <span style="color: rgba(0, 0, 0, 1)">      }</span><span style="color: rgba(0, 128, 128, 1)">15</span> <span style="color: rgba(0, 0, 0, 1)">    }</span><span style="color: rgba(0, 128, 128, 1)">16</span> <span style="color: rgba(0, 128, 128, 1)">17</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">桶的初始化</span><span style="color: rgba(0, 128, 128, 1)">18</span>     <span style="color: rgba(0, 0, 255, 1)">var</span> DEFAULT_BUCKET_SIZE = 5;            <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">设置桶的默认数量为5</span><span style="color: rgba(0, 128, 128, 1)">19</span>     bucketSize = bucketSize ||<span style="color: rgba(0, 0, 0, 1)"> DEFAULT_BUCKET_SIZE;</span><span style="color: rgba(0, 128, 128, 1)">20</span>     <span style="color: rgba(0, 0, 255, 1)">var</span> bucketCount = Math.floor((maxValue - minValue) / bucketSize) + 1<span style="color: rgba(0, 0, 0, 1)">;   </span><span style="color: rgba(0, 128, 128, 1)">21</span>     <span style="color: rgba(0, 0, 255, 1)">var</span> buckets = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Array(bucketCount);</span><span style="color: rgba(0, 128, 128, 1)">22</span>     <span style="color: rgba(0, 0, 255, 1)">for</span> (i = 0; i &lt; buckets.length; i++<span style="color: rgba(0, 0, 0, 1)">) {</span><span style="color: rgba(0, 128, 128, 1)">23</span>         buckets[i] =<span style="color: rgba(0, 0, 0, 1)"> [];</span><span style="color: rgba(0, 128, 128, 1)">24</span> <span style="color: rgba(0, 0, 0, 1)">    }</span><span style="color: rgba(0, 128, 128, 1)">25</span> <span style="color: rgba(0, 128, 128, 1)">26</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">利用映射函数将数据分配到各个桶中</span><span style="color: rgba(0, 128, 128, 1)">27</span>     <span style="color: rgba(0, 0, 255, 1)">for</span> (i = 0; i &lt; arr.length; i++<span style="color: rgba(0, 0, 0, 1)">) {</span><span style="color: rgba(0, 128, 128, 1)">28</span>         buckets[Math.floor((arr[i] - minValue) /<span style="color: rgba(0, 0, 0, 1)"> bucketSize)].push(arr[i]);</span><span style="color: rgba(0, 128, 128, 1)">29</span> <span style="color: rgba(0, 0, 0, 1)">    }</span><span style="color: rgba(0, 128, 128, 1)">30</span> <span style="color: rgba(0, 128, 128, 1)">31</span>     arr.length = 0<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 128, 128, 1)">32</span>     <span style="color: rgba(0, 0, 255, 1)">for</span> (i = 0; i &lt; buckets.length; i++<span style="color: rgba(0, 0, 0, 1)">) {</span><span style="color: rgba(0, 128, 128, 1)">33</span>         insertionSort(buckets[i]);                      <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">对每个桶进行排序，这里使用了插入排序</span><span style="color: rgba(0, 128, 128, 1)">34</span>         <span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> j = 0; j &lt; buckets[i].length; j++<span style="color: rgba(0, 0, 0, 1)">) {</span><span style="color: rgba(0, 128, 128, 1)">35</span> <span style="color: rgba(0, 0, 0, 1)">            arr.push(buckets[i][j]);                      </span><span style="color: rgba(0, 128, 128, 1)">36</span> <span style="color: rgba(0, 0, 0, 1)">        }</span><span style="color: rgba(0, 128, 128, 1)">37</span> <span style="color: rgba(0, 0, 0, 1)">    }</span><span style="color: rgba(0, 128, 128, 1)">38</span> <span style="color: rgba(0, 128, 128, 1)">39</span>     <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> arr;</span><span style="color: rgba(0, 128, 128, 1)">40</span> }</pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><span style="color:red">基数排序（Radix Sort）</span><br>基数排序须知：基数排序有两种方法：<p>MSD 从高位开始进行排序<br>LSD 从低位开始进行排序<br>基数排序 vs 计数排序 vs 桶排序<br>这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：<br>基数排序：根据键值的每位数字来分配桶<br>计数排序：每个桶只存储单一键值<br>桶排序：每个桶存储一定范围的数值</p><p>基数排序JavaScript代码实现：</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">LSD Radix Sort</span><span style="color: rgba(0, 128, 128, 1)"> 2</span> <span style="color: rgba(0, 0, 255, 1)">var</span> counter =<span style="color: rgba(0, 0, 0, 1)"> [];</span><span style="color: rgba(0, 128, 128, 1)"> 3</span> <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> radixSort(arr, maxDigit) {</span><span style="color: rgba(0, 128, 128, 1)"> 4</span>     <span style="color: rgba(0, 0, 255, 1)">var</span> mod = 10<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 128, 128, 1)"> 5</span>     <span style="color: rgba(0, 0, 255, 1)">var</span> dev = 1<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 128, 128, 1)"> 6</span>     <span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> i = 0; i &lt; maxDigit; i++, dev *= 10, mod *= 10<span style="color: rgba(0, 0, 0, 1)">) {</span><span style="color: rgba(0, 128, 128, 1)"> 7</span>         <span style="color: rgba(0, 0, 255, 1)">for</span>(<span style="color: rgba(0, 0, 255, 1)">var</span> j = 0; j &lt; arr.length; j++<span style="color: rgba(0, 0, 0, 1)">) {</span><span style="color: rgba(0, 128, 128, 1)"> 8</span>             <span style="color: rgba(0, 0, 255, 1)">var</span> bucket = parseInt((arr[j] % mod) /<span style="color: rgba(0, 0, 0, 1)"> dev);</span><span style="color: rgba(0, 128, 128, 1)"> 9</span>             <span style="color: rgba(0, 0, 255, 1)">if</span>(counter[bucket]==<span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">) {</span><span style="color: rgba(0, 128, 128, 1)">10</span>                 counter[bucket] =<span style="color: rgba(0, 0, 0, 1)"> [];</span><span style="color: rgba(0, 128, 128, 1)">11</span> <span style="color: rgba(0, 0, 0, 1)">            }</span><span style="color: rgba(0, 128, 128, 1)">12</span> <span style="color: rgba(0, 0, 0, 1)">            counter[bucket].push(arr[j]);</span><span style="color: rgba(0, 128, 128, 1)">13</span> <span style="color: rgba(0, 0, 0, 1)">        }</span><span style="color: rgba(0, 128, 128, 1)">14</span>         <span style="color: rgba(0, 0, 255, 1)">var</span> pos = 0<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 128, 128, 1)">15</span>         <span style="color: rgba(0, 0, 255, 1)">for</span>(<span style="color: rgba(0, 0, 255, 1)">var</span> j = 0; j &lt; counter.length; j++<span style="color: rgba(0, 0, 0, 1)">) {</span><span style="color: rgba(0, 128, 128, 1)">16</span>             <span style="color: rgba(0, 0, 255, 1)">var</span> value = <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 128, 128, 1)">17</span>             <span style="color: rgba(0, 0, 255, 1)">if</span>(counter[j]!=<span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">) {</span><span style="color: rgba(0, 128, 128, 1)">18</span>                 <span style="color: rgba(0, 0, 255, 1)">while</span> ((value = counter[j].shift()) != <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">) {</span><span style="color: rgba(0, 128, 128, 1)">19</span>                       arr[pos++] =<span style="color: rgba(0, 0, 0, 1)"> value;</span><span style="color: rgba(0, 128, 128, 1)">20</span> <span style="color: rgba(0, 0, 0, 1)">                }</span><span style="color: rgba(0, 128, 128, 1)">21</span> <span style="color: rgba(0, 0, 0, 1)">          }</span><span style="color: rgba(0, 128, 128, 1)">22</span> <span style="color: rgba(0, 0, 0, 1)">        }</span><span style="color: rgba(0, 128, 128, 1)">23</span> <span style="color: rgba(0, 0, 0, 1)">    }</span><span style="color: rgba(0, 128, 128, 1)">24</span>     <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> arr;</span><span style="color: rgba(0, 128, 128, 1)">25</span> }</pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;排序算法的作用：&lt;br&gt;如果你做数据处理，这个数据有恰好是有序的，这时候排序的功底就能帮你快速合并多个有序数据；如果这个数据量太大，你需要画图展现，那么你就需要建立一个索引来处理；如果在你的图像需要和鼠标交互，那么你二维的点需要一个状态管理起来，这时候就要用到多边形包含点的判断……这些场景都是需要手动排序的，sort()不一定能解决&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>js十大经典算法（上）</title>
    <link href="http://example.com/2021/03/18/js%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>http://example.com/2021/03/18/js%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%8A%EF%BC%89/</id>
    <published>2021-03-18T02:40:49.000Z</published>
    <updated>2021-03-18T03:09:05.896Z</updated>
    
    <content type="html"><![CDATA[<p>上一次我们讲过了js的几个排序算法，有许多小伙伴私信我js还有没有其他的排序算法，那么，这次我就带来了JavaScript的十大经典排序算法，文章分为上下两部分，大伙赶紧学起来！！<a id="more"></a></p><p><span style="color:red">冒泡排序（Bubble Sort）</span><br><br>冒泡排序须知：<br>作为最简单的排序算法之一，冒泡排序给我的感觉就像Abandon在单词书里出现的感觉一样，每次都在第一页第一位，所以最熟悉。。。冒泡排序还有一种优化算法，就是立一个flag，当在一趟序列遍历中元素没有发生交换，则证明该序列已经有序。但这种改进对于提升性能来说并没有什么太大作用。。。</p><p>什么时候最快（Best Cases）：<br>当输入的数据已经是正序时（都已经是正序了，我还要你冒泡排序有何用啊。。。。）</p><p>什么时候最慢（Worst Cases）：<br>当输入的数据是反序时（写一个for循环反序输出数据不就行了，干嘛要用你冒泡排序呢，我是闲的吗。。。）</p><p>冒泡排序JavaScript代码实现：</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> bubbleSort(arr) {</span><span style="color: rgba(0, 128, 128, 1)"> 2</span>     <span style="color: rgba(0, 0, 255, 1)">var</span> len =<span style="color: rgba(0, 0, 0, 1)"> arr.length;</span><span style="color: rgba(0, 128, 128, 1)"> 3</span>     <span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> i = 0; i &lt; len; i++<span style="color: rgba(0, 0, 0, 1)">) {</span><span style="color: rgba(0, 128, 128, 1)"> 4</span>         <span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> j = 0; j &lt; len - 1 - i; j++<span style="color: rgba(0, 0, 0, 1)">) {</span><span style="color: rgba(0, 128, 128, 1)"> 5</span>             <span style="color: rgba(0, 0, 255, 1)">if</span> (arr[j] &gt; arr[j+1]) {        <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">相邻元素两两对比</span><span style="color: rgba(0, 128, 128, 1)"> 6</span>                 <span style="color: rgba(0, 0, 255, 1)">var</span> temp = arr[j+1];        <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">元素交换</span><span style="color: rgba(0, 128, 128, 1)"> 7</span>                 arr[j+1] =<span style="color: rgba(0, 0, 0, 1)"> arr[j];</span><span style="color: rgba(0, 128, 128, 1)"> 8</span>                 arr[j] =<span style="color: rgba(0, 0, 0, 1)"> temp;</span><span style="color: rgba(0, 128, 128, 1)"> 9</span> <span style="color: rgba(0, 0, 0, 1)">            }</span><span style="color: rgba(0, 128, 128, 1)">10</span> <span style="color: rgba(0, 0, 0, 1)">        }</span><span style="color: rgba(0, 128, 128, 1)">11</span> <span style="color: rgba(0, 0, 0, 1)">    }</span><span style="color: rgba(0, 128, 128, 1)">12</span>     <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> arr;</span><span style="color: rgba(0, 128, 128, 1)">13</span> }</pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><span style="color:red">选择排序（Selection Sort）</span><br>选择排序须知：在时间复杂度上表现最稳定的排序算法之一，因为无论什么数据进去都是O(n²)的时间复杂度。。。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。<p>选择排序JavaScript代码实现：</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> selectionSort(arr) {</span><span style="color: rgba(0, 128, 128, 1)"> 2</span>     <span style="color: rgba(0, 0, 255, 1)">var</span> len =<span style="color: rgba(0, 0, 0, 1)"> arr.length;</span><span style="color: rgba(0, 128, 128, 1)"> 3</span>     <span style="color: rgba(0, 0, 255, 1)">var</span><span style="color: rgba(0, 0, 0, 1)"> minIndex, temp;</span><span style="color: rgba(0, 128, 128, 1)"> 4</span>     <span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> i = 0; i &lt; len - 1; i++<span style="color: rgba(0, 0, 0, 1)">) {</span><span style="color: rgba(0, 128, 128, 1)"> 5</span>         minIndex =<span style="color: rgba(0, 0, 0, 1)"> i;</span><span style="color: rgba(0, 128, 128, 1)"> 6</span>         <span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> j = i + 1; j &lt; len; j++<span style="color: rgba(0, 0, 0, 1)">) {</span><span style="color: rgba(0, 128, 128, 1)"> 7</span>             <span style="color: rgba(0, 0, 255, 1)">if</span> (arr[j] &lt; arr[minIndex]) {     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">寻找最小的数</span><span style="color: rgba(0, 128, 128, 1)"> 8</span>                 minIndex = j;                 <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">将最小数的索引保存</span><span style="color: rgba(0, 128, 128, 1)"> 9</span> <span style="color: rgba(0, 0, 0, 1)">            }</span><span style="color: rgba(0, 128, 128, 1)">10</span> <span style="color: rgba(0, 0, 0, 1)">        }</span><span style="color: rgba(0, 128, 128, 1)">11</span>         temp =<span style="color: rgba(0, 0, 0, 1)"> arr[i];</span><span style="color: rgba(0, 128, 128, 1)">12</span>         arr[i] =<span style="color: rgba(0, 0, 0, 1)"> arr[minIndex];</span><span style="color: rgba(0, 128, 128, 1)">13</span>         arr[minIndex] =<span style="color: rgba(0, 0, 0, 1)"> temp;</span><span style="color: rgba(0, 128, 128, 1)">14</span> <span style="color: rgba(0, 0, 0, 1)">    }</span><span style="color: rgba(0, 128, 128, 1)">15</span>     <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> arr;</span><span style="color: rgba(0, 128, 128, 1)">16</span> }</pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><span style="color:red">插入排序（Insertion Sort）</span><br>插入排序须知：插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了，因为只要打过扑克牌的人都应该能够秒懂。当然，如果你说你打扑克牌摸牌的时候从来不按牌的大小整理牌，那估计这辈子你对插入排序的算法都不会产生任何兴趣了。。。插入排序和冒泡排序一样，也有一种优化算法，叫做拆半插入。对于这种算法，得了懒癌的我就套用教科书上的一句经典的话吧：感兴趣的同学可以在课后自行研究。。。<p>插入排序JavaScript代码实现：</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> insertionSort(arr) {</span><span style="color: rgba(0, 128, 128, 1)"> 2</span>     <span style="color: rgba(0, 0, 255, 1)">var</span> len =<span style="color: rgba(0, 0, 0, 1)"> arr.length;</span><span style="color: rgba(0, 128, 128, 1)"> 3</span>     <span style="color: rgba(0, 0, 255, 1)">var</span><span style="color: rgba(0, 0, 0, 1)"> preIndex, current;</span><span style="color: rgba(0, 128, 128, 1)"> 4</span>     <span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> i = 1; i &lt; len; i++<span style="color: rgba(0, 0, 0, 1)">) {</span><span style="color: rgba(0, 128, 128, 1)"> 5</span>         preIndex = i - 1<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 128, 128, 1)"> 6</span>         current =<span style="color: rgba(0, 0, 0, 1)"> arr[i];</span><span style="color: rgba(0, 128, 128, 1)"> 7</span>         <span style="color: rgba(0, 0, 255, 1)">while</span>(preIndex &gt;= 0 &amp;&amp; arr[preIndex] &gt;<span style="color: rgba(0, 0, 0, 1)"> current) {</span><span style="color: rgba(0, 128, 128, 1)"> 8</span>             arr[preIndex+1] =<span style="color: rgba(0, 0, 0, 1)"> arr[preIndex];</span><span style="color: rgba(0, 128, 128, 1)"> 9</span>             preIndex--<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 128, 128, 1)">10</span> <span style="color: rgba(0, 0, 0, 1)">        }</span><span style="color: rgba(0, 128, 128, 1)">11</span>         arr[preIndex+1] =<span style="color: rgba(0, 0, 0, 1)"> current;</span><span style="color: rgba(0, 128, 128, 1)">12</span> <span style="color: rgba(0, 0, 0, 1)">    }</span><span style="color: rgba(0, 128, 128, 1)">13</span>     <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> arr;</span><span style="color: rgba(0, 128, 128, 1)">14</span> }</pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><span style="color:red">希尔排序（Shell Sort）</span><br>希尔排序须知：希尔排序是插入排序的一种更高效率的实现。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序的核心在于间隔序列的设定。既可以提前设定好间隔序列，也可以动态的定义间隔序列。动态定义间隔序列的算法是《算法（第4版》的合著者Robert Sedgewick提出的。在这里，我就使用了这种方法。<p>希尔排序JavaScript代码实现：</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> shellSort(arr) {</span><span style="color: rgba(0, 128, 128, 1)"> 2</span>     <span style="color: rgba(0, 0, 255, 1)">var</span> len =<span style="color: rgba(0, 0, 0, 1)"> arr.length,</span><span style="color: rgba(0, 128, 128, 1)"> 3</span> <span style="color: rgba(0, 0, 0, 1)">        temp,</span><span style="color: rgba(0, 128, 128, 1)"> 4</span>         gap = 1<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 128, 128, 1)"> 5</span>     <span style="color: rgba(0, 0, 255, 1)">while</span>(gap &lt; len/3) {          //动态定义间隔序列<span style="color: rgba(0, 128, 128, 1)"> 6</span>         gap =gap*3+1<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 128, 128, 1)"> 7</span> <span style="color: rgba(0, 0, 0, 1)">    }</span><span style="color: rgba(0, 128, 128, 1)"> 8</span>     <span style="color: rgba(0, 0, 255, 1)">for</span> (gap; gap&gt; 0; gap = Math.floor(gap/3)) {<span style="color: rgba(0, 128, 128, 1)"> 9</span>         <span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> i = gap; i &lt; len; i++<span style="color: rgba(0, 0, 0, 1)">) {</span><span style="color: rgba(0, 128, 128, 1)">10</span>             temp =<span style="color: rgba(0, 0, 0, 1)"> arr[i];</span><span style="color: rgba(0, 128, 128, 1)">11</span>             <span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> j = i-gap; j &gt; 0 &amp;&amp; arr[j]&gt; temp; j-=<span style="color: rgba(0, 0, 0, 1)">gap) {</span><span style="color: rgba(0, 128, 128, 1)">12</span>                 arr[j+gap] =<span style="color: rgba(0, 0, 0, 1)"> arr[j];</span><span style="color: rgba(0, 128, 128, 1)">13</span> <span style="color: rgba(0, 0, 0, 1)">            }</span><span style="color: rgba(0, 128, 128, 1)">14</span>             arr[j+gap] =<span style="color: rgba(0, 0, 0, 1)"> temp;</span><span style="color: rgba(0, 128, 128, 1)">15</span> <span style="color: rgba(0, 0, 0, 1)">        }</span><span style="color: rgba(0, 128, 128, 1)">16</span> <span style="color: rgba(0, 0, 0, 1)">    }</span><span style="color: rgba(0, 128, 128, 1)">17</span>     <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> arr;</span><span style="color: rgba(0, 128, 128, 1)">18</span> }</pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><span style="color:red">归并排序（Merge Sort）</span><br>归并排序须知：作为一种典型的分而治之思想的算法应用，归并排序的实现由两种方法：<p>自上而下的递归（所有递归的方法都可以用迭代重写，所以就有了第2种方法）<br>自下而上的迭代<br>在《数据结构与算法JavaScript描述》中，作者给出了自下而上的迭代方法。但是对于递归法，作者却认为：</p><p>However, it is not possible to do so in JavaScript, as the recursion goes too deep<br>for the language to handle.<br>然而,在 JavaScript 中这种方式不太可行,因为这个算法的递归深度对它来讲太深了。</p><p>说实话，我不太理解这句话。意思是JavaScript编译器内存太小，递归太深容易造成内存溢出吗？还望有大神能够指教。<br>更新：<br>在《JavaScript语言精粹》的第四章里提到了递归问题。对我之前的疑问进行了解答：</p><p>Some languages offer the tail recursion optimization. This means that if a function returns the result of invoking itself recursively, then the invocation is replaced with a loop, which can significantly speed things up. Unfortunately, JavaScript does not currently provide tail recursion optimization. Functions that recurse very deeply can fail by exhausting the return stack.<br>一些语言提供了尾递归优化。这意味着如果一个函数返回自身递归调用的结果，那么调用的过程会被替换为一个循环，它可以显著提高速度。遗憾的是，JavaScript当前并没有提供尾递归优化。深度递归的函数可能会因为堆栈溢出而运行失败。</p><p>简而言之，就是JavaScript没有对递归进行优化。运用递归函数不仅没有运行速度上的优势，还可能造成程序运行失败。因此不建议使用递归。</p><p>和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是O(n log n）的时间复杂度。代价是需要额外的内存空间。</p><p>归并排序JavaScript代码实现：</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> <span style="color: rgba(0, 0, 255, 1)">function</span> mergeSort(arr) {  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">采用自上而下的递归方法</span><span style="color: rgba(0, 128, 128, 1)"> 2</span>     <span style="color: rgba(0, 0, 255, 1)">var</span> len =<span style="color: rgba(0, 0, 0, 1)"> arr.length;</span><span style="color: rgba(0, 128, 128, 1)"> 3</span>     <span style="color: rgba(0, 0, 255, 1)">if</span>(len &lt; 2<span style="color: rgba(0, 0, 0, 1)">) {</span><span style="color: rgba(0, 128, 128, 1)"> 4</span>         <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> arr;</span><span style="color: rgba(0, 128, 128, 1)"> 5</span> <span style="color: rgba(0, 0, 0, 1)">    }</span><span style="color: rgba(0, 128, 128, 1)"> 6</span>     <span style="color: rgba(0, 0, 255, 1)">var</span> middle = Math.floor(len / 2<span style="color: rgba(0, 0, 0, 1)">),</span><span style="color: rgba(0, 128, 128, 1)"> 7</span>         left = arr.slice(0<span style="color: rgba(0, 0, 0, 1)">, middle),</span><span style="color: rgba(0, 128, 128, 1)"> 8</span>         right =<span style="color: rgba(0, 0, 0, 1)"> arr.slice(middle);</span><span style="color: rgba(0, 128, 128, 1)"> 9</span>     <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> merge(mergeSort(left), mergeSort(right));</span><span style="color: rgba(0, 128, 128, 1)">10</span> <span style="color: rgba(0, 0, 0, 1)">}</span><span style="color: rgba(0, 128, 128, 1)">11</span> <span style="color: rgba(0, 128, 128, 1)">12</span> <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> merge(left, right)</span><span style="color: rgba(0, 128, 128, 1)">13</span> <span style="color: rgba(0, 0, 0, 1)">{</span><span style="color: rgba(0, 128, 128, 1)">14</span>     <span style="color: rgba(0, 0, 255, 1)">var</span> result =<span style="color: rgba(0, 0, 0, 1)"> [];</span><span style="color: rgba(0, 128, 128, 1)">15</span> <span style="color: rgba(0, 128, 128, 1)">16</span>     <span style="color: rgba(0, 0, 255, 1)">while</span> (left.length&gt;0 &amp;&amp; right.length&gt;0<span style="color: rgba(0, 0, 0, 1)">) {</span><span style="color: rgba(0, 128, 128, 1)">17</span>         <span style="color: rgba(0, 0, 255, 1)">if</span> (left[0] &lt;= right[0<span style="color: rgba(0, 0, 0, 1)">]) {</span><span style="color: rgba(0, 128, 128, 1)">18</span> <span style="color: rgba(0, 0, 0, 1)">            result.push(left.shift());</span><span style="color: rgba(0, 128, 128, 1)">19</span>         } <span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 128, 128, 1)">20</span> <span style="color: rgba(0, 0, 0, 1)">            result.push(right.shift());</span><span style="color: rgba(0, 128, 128, 1)">21</span> <span style="color: rgba(0, 0, 0, 1)">        }</span><span style="color: rgba(0, 128, 128, 1)">22</span> <span style="color: rgba(0, 0, 0, 1)">    }</span><span style="color: rgba(0, 128, 128, 1)">23</span> <span style="color: rgba(0, 128, 128, 1)">24</span>     <span style="color: rgba(0, 0, 255, 1)">while</span><span style="color: rgba(0, 0, 0, 1)"> (left.length)</span><span style="color: rgba(0, 128, 128, 1)">25</span> <span style="color: rgba(0, 0, 0, 1)">        result.push(left.shift());</span><span style="color: rgba(0, 128, 128, 1)">26</span> <span style="color: rgba(0, 128, 128, 1)">27</span>     <span style="color: rgba(0, 0, 255, 1)">while</span><span style="color: rgba(0, 0, 0, 1)"> (right.length)</span><span style="color: rgba(0, 128, 128, 1)">28</span> <span style="color: rgba(0, 0, 0, 1)">        result.push(right.shift());</span><span style="color: rgba(0, 128, 128, 1)">29</span> <span style="color: rgba(0, 128, 128, 1)">30</span>     <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> result;</span><span style="color: rgba(0, 128, 128, 1)">31</span> }</pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;上一次我们讲过了js的几个排序算法，有许多小伙伴私信我js还有没有其他的排序算法，那么，这次我就带来了JavaScript的十大经典排序算法，文章分为上下两部分，大伙赶紧学起来！！&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>javascript数据类型</title>
    <link href="http://example.com/2021/03/11/javascript%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://example.com/2021/03/11/javascript%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-03-11T13:14:09.000Z</published>
    <updated>2021-03-11T13:58:17.828Z</updated>
    
    <content type="html"><![CDATA[<p>javascript的数据类型<a id="more"></a></p><p>JavaScript中有6种数据类型：<br>1.数字（number）<br>2.字符串（string）<br>3.布尔值（boolean）<br>4.undefined<br>5.null<br>6.对象（Object<br>其中对象类型包括：数组（Array）、函数（Function）、还有两个特殊的对象：正则（RegExp）和日期（Date）。</p><p><span style="color:#F67F30">一.分类</span><br>从不同的角度对6种数据类型进行分类：</p><p><img src="/2021/03/11/javascript%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B01.jpg" alt="js数据类型"></p><p><span style="color:#F67F30">二.判断</span></p><p><span style="color:red">1.typeof</span></p><p>typeof返回一个表示数据类型的字符串，返回结果包括：number、string、boolean、object、undefined、function。typeof可以对基本类型number、string  、boolean、undefined做出准确的判断（null除外，typeof null===“object”，这是由于历史的原因，我就不巴拉巴拉了，其实我也说不清楚?）；而对于引用类型，除了function之外返回的都是object。但当我们需要知道某个对象的具体类型时，typeof就显得有些力不从心了。</p><pre><code class="hljs javascript"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">typeof</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// number 有效</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">typeof</span>&nbsp;‘ ’;<span class="hljs-comment">//string 有效</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">typeof</span>&nbsp;<span class="hljs-literal">true</span>;&nbsp;<span class="hljs-comment">//boolean 有效</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">typeof</span>&nbsp;<span class="hljs-literal">undefined</span>;&nbsp;<span class="hljs-comment">//undefined 有效</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">typeof</span>&nbsp;<span class="hljs-literal">null</span>;&nbsp;<span class="hljs-comment">//object 无效</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">typeof</span>&nbsp;<span class="hljs-keyword">new</span>&nbsp;<span class="hljs-built_in">Function</span>();&nbsp;<span class="hljs-comment">// function 有效</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">typeof</span>&nbsp;[] ;&nbsp;<span class="hljs-comment">//object 无效</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">typeof</span>&nbsp;<span class="hljs-keyword">new</span>&nbsp;<span class="hljs-built_in">Date</span>();&nbsp;<span class="hljs-comment">//object 无效</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">typeof</span>&nbsp;<span class="hljs-keyword">new</span>&nbsp;<span class="hljs-built_in">RegExp</span>();&nbsp;<span class="hljs-comment">//object 无效</span></div></div></li></ol></code><div class="hljs-button signin" data-title="登录后复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.signin(event)"></div></pre><p><span style="color:red">2.instanceof</span><br>当我们需要知道某个对象的具体类型时,可以用运算符 instanceof，instanceof操作符判断左操作数对象的原型链上是否有右边这个构造函数的prototype属性，也就是说指定对象是否是某个构造函数的实例，最后返回布尔值。 检测的我们用一段伪代码来模拟instanceof内部执行过程：</p><pre><code class="hljs kotlin"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">instanceof (A,B) = &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword">var</span>&nbsp;L = A.__proto__;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword">var</span>&nbsp;R = B.prototype;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword">if</span>(L === R) &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment">//A的内部属性__proto__指向B的原型对象</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword">return</span>&nbsp;<span class="hljs-literal">true</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp;&nbsp;&#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword">return</span>&nbsp;<span class="hljs-literal">false</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&#125;</div></div></li></ol></code><div class="hljs-button signin" data-title="登录后复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.signin(event)"></div></pre><p>从上述过程可以看出，当 A 的 <strong>proto</strong> 指向 B 的 prototype 时，就认为A就是B的实例，我们再来看几个例子：</p><pre><code class="hljs javascript"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">[] <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>;&nbsp;<span class="hljs-comment">//true</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">[] <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>;&nbsp;<span class="hljs-comment">//true</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">new</span>&nbsp;<span class="hljs-built_in">Date</span>() <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Date</span>;<span class="hljs-comment">//true</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">new</span>&nbsp;<span class="hljs-built_in">Date</span>() <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>;<span class="hljs-comment">//true</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;&#125;;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">new</span>&nbsp;Person() <span class="hljs-keyword">instanceof</span> Person;<span class="hljs-comment">//true</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">new</span>&nbsp;Person() <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>;<span class="hljs-comment">//true</span></div></div></li></ol></code><div class="hljs-button signin" data-title="登录后复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.signin(event)"></div></pre><p>我们发现，虽然 instanceof 能够判断出 [] 是Array的实例，但它认为 [] 也是Object的实例，为什么呢？ 我们来分析一下[]、Array、Object 三者之间的关系: 从instanceof 能够判断出 [].<strong>proto</strong> 指向 Array.prototype， 而 Array.prototype.<strong>proto</strong> 又指向了Object.prototype，Object.prototype.<strong>proto</strong> 指向了null,标志着原型链的结束。因此，[]、Array、Object就形成了如下图所示的一条原型链：</p><p><img src="/2021/03/11/javascript%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B02.jpg" alt="js数据类型"></p><p>从原型链可以看出，[] 的 <strong>proto</strong>  直接指向Array.prototype, 间接指向Object.prototype, 所以按照 instanceof 的判断规则，[] 就是Object的实例。</p><p><span style="color:blue">注意:instanceof运算符只能用于对象，不适用原始类型的值。</span></p><pre><code class="hljs javascript"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">'hello'</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">String</span> <span class="hljs-comment">// false</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-literal">null</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span> <span class="hljs-comment">// false</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-literal">undefined</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span> <span class="hljs-comment">// false</span></div></div></li></ol></code><div class="hljs-button signin" data-title="登录后复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.signin(event)"></div></pre><p>字符串、null和undefined不是对象，所以返回false。</p><p><span style="color:red">3.constructor</span></p><p>constructor属性的作用是，可以得知某个实例对象，到底是哪一个构造函数产生的。</p><pre><code class="hljs go"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">var</span> f = <span class="hljs-built_in">new</span> F();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">f.constructor === F;<span class="hljs-comment">// true</span></div></div></li></ol></code><div class="hljs-button signin" data-title="登录后复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.signin(event)"></div></pre><p>但是 constructor 属性易变，不可信赖，这个主要体现在自定义对象上，当开发者重写prototype后，原有的constructor会丢失。</p><pre><code class="hljs php"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">F</span>(<span class="hljs-params"></span>) </span>&#123;&#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">F.prototype = &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    _name: <span class="hljs-string">'Eric'</span>,</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&#125;;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">var</span> f = <span class="hljs-keyword">new</span> F();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">f.constructor === F; <span class="hljs-comment">// false</span></div></div></li></ol></code><div class="hljs-button signin" data-title="登录后复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.signin(event)"></div></pre><p>因此，为了规范，在重写对象原型时一般都需要重新给constructor赋值，以保证实例对象的类型不被改写。</p><pre><code class="hljs php"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">F</span>(<span class="hljs-params"></span>) </span>&#123;&#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">F.prototype = &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    constructor: F, </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   _name: <span class="hljs-string">'Eric'</span>,</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&#125;;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">var</span> f = <span class="hljs-keyword">new</span> F();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">f.constructor === F; <span class="hljs-comment">// true </span></div></div></li></ol></code><div class="hljs-button signin" data-title="登录后复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.signin(event)"></div></pre><p><span style="color:red">4、Object.prototype.toString </span><br>toString是Object原型对象上的一个方法，该方法默认返回其调用者的具体类型，更严格的讲，是 toString运行时this指向的对象类型, 返回的类型格式为[object,xxx],xxx是具体的数据类型，其中包括：String,Number,Boolean,Undefined,Null,Function,Date,Array,RegExp,Error,HTMLDocument,… 基本上所有对象的类型都可以通过这个方法获取到。</p><pre><code class="hljs javascript"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-string">''</span>) ;   <span class="hljs-comment">// [object String]</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-number">1</span>) ;    <span class="hljs-comment">// [object Number]</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-literal">true</span>) ; <span class="hljs-comment">// [object Boolean]</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-literal">undefined</span>) ; <span class="hljs-comment">// [object Undefined]</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-literal">null</span>) ; <span class="hljs-comment">// [object Null]</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>()) ; <span class="hljs-comment">// [object Function]</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()) ; <span class="hljs-comment">// [object Date]</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">Object</span>.prototype.toString.call([]) ; <span class="hljs-comment">// [object Array]</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>()) ; <span class="hljs-comment">// [object RegExp]</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>()) ; <span class="hljs-comment">// [object Error]</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-built_in">document</span>) ; <span class="hljs-comment">// [object HTMLDocument]</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-built_in">window</span>) ; <span class="hljs-comment">//[object Window]</span></div></div></li></ol></code><div class="hljs-button signin" data-title="登录后复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.signin(event)"></div></pre><p>需要注意的是，必须通过Object.prototype.toString.call来获取，而不能直接 new Date().toString(), 从原型链的角度讲，所有对象的原型链最终都指向了Object, 按照JS变量查找规则，其他对象应该也可以直接访问到Object的toString方法，而事实上，大部分的对象都实现了自身的toString方法，这样就可能会导致Object的toString被终止查找，因此要用call来强制执行Object的toString方法。</p><p><span style="color:#F67F30">三.总结</span></p><p>typeof可以准确地判断出基本类型，但是对于引用类型除function之外返回的都是object；</p><p>已知是引用类型的情况可以选用instanceof或constructor方法进行具体类型的判断：</p><p>instanceof是基于原型链的；</p><p>constructor 属性易变，不可信赖，为了规范，在重写对象原型时一般都需要重新给constructor赋值，以保证实例对象的类型不被改写；</p><p>Object.prototype.toString.call() 通用但很繁琐。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;javascript的数据类型&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>蔬菜生活录(5)</title>
    <link href="http://example.com/2021/03/06/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%95-5/"/>
    <id>http://example.com/2021/03/06/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%95-5/</id>
    <published>2021-03-06T13:17:07.000Z</published>
    <updated>2021-03-07T09:08:31.559Z</updated>
    
    <content type="html"><![CDATA[<p>2021.3.6  天气：有雨 <a id="more"></a><br><img src="/2021/03/06/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%95-5/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%955.jpg" alt="蔬菜生活录"><br>今天，终于可以回学校住了。</p><p>在外面住了差不多十几天，终于感觉到了，还是宿舍的好，毕竟生活设备齐全。</p><p>而且在外面租房的地方也挺偏，每天下班回去后都得经过一条黑乎乎的道路，</p><p>而且更恐怖的是还时不时的崩出一条狗出来，真是吓死人了</p><p>不过还好，习惯了。</p><p>回到了熟悉的学校，大三学生们也回来了，整个校园又变得热闹了起来。<br>果然，校园还是热闹一点好。不过，这都好像与我无关。</p><p>女神降临也快追完啦！心心念念的美剧也结束了，<br>不过还好，我的巨人还攒了几集，趁着这个周末，感觉可以好好地躺下来一下子把没看的都给补回来，<br>嘻嘻。</p><p>最近一段时间，感觉身边发生了好多事情，不管是工作的事情，还是生活中的事情。</p><p>我最好的搭档，他辞职了，我们一起负责公司的项目，现在只剩我一个人了，整个项目现在都停止了，</p><p>而我，也变得更加划水了  哈哈………..</p><p>当然，他为什么辞职，这里也就不方便说了。</p><p>还有几天，我的小伙伴们也要回来了，好久没有一起打球了。</p><p>加油吧 骚年</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2021.3.6  天气：有雨&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>javascript排序详解</title>
    <link href="http://example.com/2021/02/26/javascript%E6%8E%92%E5%BA%8F%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2021/02/26/javascript%E6%8E%92%E5%BA%8F%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-02-26T02:52:14.000Z</published>
    <updated>2021-02-26T04:17:02.468Z</updated>
    
    <content type="html"><![CDATA[<p>javascript排序详解<a id="more"></a><br><span style="color:#F67F30">JS-排序详解-冒泡排序</span><br>说明<br>时间复杂度指的是一个算法执行所耗费的时间<br>空间复杂度指运行完一个程序所需内存的大小<br>稳定指，如果a=b,a在b的前面，排序后a仍然在b的前面<br>不稳定指，如果a=b，a在b的前面，排序后可能会交换位置<br>JS冒泡排序</p><p>原理<br>依次比较相邻的两个值，如果后面的比前面的小，则将小的元素排到前面。依照这个规则进行多次并且递减的迭代，直到顺序正确。<br>时间复杂度，空间复杂度，稳定性<br>平均时间复杂度O(n<em>n)<br>最好情况O(n)<br>最差情况O(n</em>n)<br>稳定性：稳定<br>冒泡排序的写法:</p><p>  var examplearr=[8,94,15,88,55,76,21,39];<br>function sortarr(arr){<br>    for(i=0;i&lt;arr.length-1;i++){<br>        for(j=0;j&lt;arr.length-1-i;j++){<br>            if(arr[j]&gt;arr[j+1]){<br>                var temp=arr[j];<br>                arr[j]=arr[j+1];<br>                arr[j+1]=temp;<br>            }<br>        }<br>    }<br>    return arr;<br>}<br>sortarr(examplearr);<br>console.log(examplearr);</p><p>解析<br>两个循环<br>当i=0的时候，里面的循环完整执行，从j=0执行到j=6,这也就是第一遍排序，结果是将最大的数排到了最后，这一遍循环结束后的结果应该是[8,15,88,55,76,21,39,94]<br>当i=1的时候，里面的循环再次完整执行，由于最大的数已经在最后了，没有必要去比较数组的最后两项，这也是j&lt;arr.length-1-i的巧妙之处，结果是[8,15,55,76,21,39,88,94]<br>说到这里，规律就清楚了，每次将剩下数组里面最大的一个数排到最后面，当第一个循环执行到最后的时候，也就是i=6,此时，j=0,只需要比较数组的第一和第二项，比较完毕，返回。</p><p><span style="color:#F67F30">JS-排序详解-选择排序</span></p><p>说明<br>时间复杂度指的是一个算法执行所耗费的时间<br>空间复杂度指运行完一个程序所需内存的大小<br>稳定指，如果a=b,a在b的前面，排序后a仍然在b的前面<br>不稳定指，如果a=b，a在b的前面，排序后可能会交换位置<br>JS选择排序<br>原理<br>首先从原始数组中找到最小的元素，并把该元素放在数组的最前面，然后再从剩下的元素中寻找最小的元素，放在之前最小元素的后面，知道排序完毕。<br>时间复杂度，空间复杂度，稳定性<br>平均时间复杂度O(n<em>n)<br>最好情况O(n</em>n)<br>最差情况O(n*n)<br>空间复杂度O(1)<br>稳定性：不稳定<br>选择排序的写法:</p><p>var example=[8,94,15,88,55,76,21,39];<br>function selectSort(arr){<br>    var len=arr.length;<br>    var minIndex,temp;<br>    console.time(‘选择排序耗时’)；<br>    for(i=0;i&lt;len-1;i++){<br>        minIndex=i;<br>        for(j=i+1;j&lt;len;j++){<br>            if(arr[j]&lt;arr[minIndex]){<br>                minIndex=j;<br>            }<br>        }<br>    temp=arr[i];<br>    arr[i]=arr[minIndex];<br>    arr[minIndex]=temp;<br>    }<br>    console.timeEnd(‘选择排序耗时’);<br>    return arr;<br>}<br>console.log(selectSort(example));</p><p>解析<br>minIndex始终保存着最小值的位置的索引，随着i的自增，遍历的数组长度越来越短，直到完成排序。</p><p><span style="color:#F67F30">JS-排序详解-快速排序</span></p><p>说明<br>时间复杂度指的是一个算法执行所耗费的时间<br>空间复杂度指运行完一个程序所需内存的大小<br>稳定指，如果a=b,a在b的前面，排序后a仍然在b的前面<br>不稳定指，如果a=b，a在b的前面，排序后可能会交换位置<br>JS快速排序<br>原理<br>从数组中选定一个基数，然后把数组中的每一项与此基数做比较，小的放入一个新数组，大的放入另外一个新数组。然后再采用这样的方法操作新数组。直到所有子集只剩下一个元素，排序完成。<br>时间复杂度，空间复杂度，稳定性<br>平均时间复杂度O(nlogn)<br>最好情况O(nlogn)<br>最差情况O(n*n)<br>空间复杂度O(logn)<br>稳定性：不稳定<br>快速排序的写法:<br>var examplearr=[8,94,15,88,55,76,21,39];<br>function fastsort(arr){<br>    if(arr.length&lt;2){<br>        return arr;<br>    }<br>    var left=[];<br>    var right=[];<br>    var pivotIndex=Math.floor(arr.length/2);<br>    var pivot=arr.splice(pivotIndex,1)[0];<br>    for(i=0;i&lt;arr.length;i++){<br>        if(arr[i]&lt;pivot){<br>            left.push(arr[i]);<br>        }else{<br>            right.push(arr[i])<br>        }<br>    }<br>    return fastsort(left).concat([pivot],fastsort(right));<br>}<br>console.log(fastsort(examplearr));</p><p>解析<br>pivotIndex是将数组的长度除2向下取整得到的一个数值，数组的长度是不断减半的，所以最后它的值为0<br>pivot是利用splice方法从数组里获取一个基数</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;javascript排序详解&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>HTML行内元素、块状元素、行内块状元素的区别</title>
    <link href="http://example.com/2021/02/21/HTML%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E3%80%81%E5%9D%97%E7%8A%B6%E5%85%83%E7%B4%A0%E3%80%81%E8%A1%8C%E5%86%85%E5%9D%97%E7%8A%B6%E5%85%83%E7%B4%A0%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2021/02/21/HTML%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E3%80%81%E5%9D%97%E7%8A%B6%E5%85%83%E7%B4%A0%E3%80%81%E8%A1%8C%E5%86%85%E5%9D%97%E7%8A%B6%E5%85%83%E7%B4%A0%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2021-02-21T03:41:51.000Z</published>
    <updated>2021-02-21T06:10:34.846Z</updated>
    
    <content type="html"><![CDATA[<p>HTML可以将元素分类方式分为行内元素、块状元素和行内块状元素三种。<a id="more"></a>首先需要说明的是，这三者是可以互相转换的，使用display属性能够将三者任意转换：</p><p>　　(1)display:inline;转换为行内元素</p><p>　　(2)display:block;转换为块状元素</p><p>　　(3)display:inline-block;转换为行内块状元素</p><!DOCTYPE html><html><pre><code>&lt;head&gt;    &lt;meta charset=&quot;utf-8&quot; /&gt;    &lt;title&gt;测试案例&lt;/title&gt;    &lt;style type=&quot;text/css&quot;&gt;        span &#123;             display: block;            width: 120px;            height: 30px;            background: red;        &#125;        div &#123;            display: inline;            width: 120px;            height: 200px;            background: green;        &#125;        i &#123;            display: inline-block;            width: 120px;            height: 30px;            background: lightblue;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;span&gt;行内转块状&lt;/span&gt;    &lt;div&gt;块状转行内 &lt;/div&gt;    &lt;i&gt;行内转行内块状&lt;/i&gt;&lt;/body&gt;</code></pre></html><p><img src="/2021/02/21/HTML%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E3%80%81%E5%9D%97%E7%8A%B6%E5%85%83%E7%B4%A0%E3%80%81%E8%A1%8C%E5%86%85%E5%9D%97%E7%8A%B6%E5%85%83%E7%B4%A0%E7%9A%84%E5%8C%BA%E5%88%AB/%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A001.png" alt="行内元素"></p><p><span style="color:#F67F30">1.行内元素</span><br>行内元素最常使用的就是span，其他的只在特定功能下使用，修饰字体&lt;b&gt;和&lt;i&gt;标签，还有&lt;sub&gt;和&lt;sup&gt;这两个标签可以直接做出平方的效果，而不需要类似移动属性的帮助，很实用。</p><p>　　行内元素特征：(1)设置宽高无效</p><p>　　　　　　　　　(2)对margin仅设置左右方向有效，上下无效；padding设置上下左右都有效，即会撑大空间</p><p>　　　　　　　　　(3)不会自动进行换行</p><!DOCTYPE html><html><pre><code>&lt;head&gt;    &lt;meta charset=&quot;utf-8&quot; /&gt;    &lt;title&gt;测试案例&lt;/title&gt;    &lt;style type=&quot;text/css&quot;&gt;        span &#123;            width: 120px;            height: 120px;            margin: 1000px 20px;            padding: 50px 40px;            background: lightblue;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;i&gt;不会自动换行&lt;/i&gt;    &lt;span&gt;行内元素&lt;/span&gt;&lt;/body&gt;</code></pre></html><p><img src="/2021/02/21/HTML%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E3%80%81%E5%9D%97%E7%8A%B6%E5%85%83%E7%B4%A0%E3%80%81%E8%A1%8C%E5%86%85%E5%9D%97%E7%8A%B6%E5%85%83%E7%B4%A0%E7%9A%84%E5%8C%BA%E5%88%AB/%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A002.png" alt="行内元素"></p><p><span style="color:#F67F30">2.块状元素</span></p><p>　块状元素代表性的就是div，其他如p、nav、aside、header、footer、section、article、ul-li、address等等，都可以用div来实现。不过为了可以方便程序员解读代码，一般都会使用特定的语义化标签，使得代码可读性强，且便于查错。</p><p>　　块状元素特征：(1)能够识别宽高</p><p>　　　　　　　　　(2)margin和padding的上下左右均对其有效</p><p>　　　　　　　　　(3)可以自动换行</p><p>　　　　　　　　　(4)多个块状元素标签写在一起，默认排列方式为从上至下</p><!DOCTYPE html><html><pre><code>&lt;head&gt;    &lt;meta charset=&quot;utf-8&quot; /&gt;    &lt;title&gt;测试案例&lt;/title&gt;    &lt;style type=&quot;text/css&quot;&gt;        div &#123;            width: 120px;            height: 120px;            margin: 50px 50px;            padding: 50px 40px;            background: lightblue;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;i&gt;自动换行&lt;/i&gt;    &lt;div&gt;块状元素&lt;/div&gt;    &lt;div&gt;块状元素&lt;/div&gt;&lt;/body&gt;</code></pre></html><p><img src="/2021/02/21/HTML%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E3%80%81%E5%9D%97%E7%8A%B6%E5%85%83%E7%B4%A0%E3%80%81%E8%A1%8C%E5%86%85%E5%9D%97%E7%8A%B6%E5%85%83%E7%B4%A0%E7%9A%84%E5%8C%BA%E5%88%AB/%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A003.png" alt="行内元素"></p><p><span style="color:#F67F30">3.行内块元素</span></p><p>行内块状元素综合了行内元素和块状元素的特性，但是各有取舍。因此行内块状元素在日常的使用中，由于其特性，使用的次数也比较多。</p><p>　　行内块状元素特征：(1)不自动换行</p><p>　　　　　　　　　　　(2)能够识别宽高</p><p>　　　　　　　　　　　(3)默认排列方式为从左到右</p><!DOCTYPE html><html><pre><code>&lt;head&gt;    &lt;meta charset=&quot;utf-8&quot; /&gt;    &lt;title&gt;测试案例&lt;/title&gt;    &lt;style type=&quot;text/css&quot;&gt;        div &#123;            display: inline-block;            width: 100px;            height: 50px;            background: lightblue;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div&gt;行内块状元素&lt;/div&gt;    &lt;div&gt;行内块状元素&lt;/div&gt;&lt;/body&gt;</code></pre></html><p><img src="/2021/02/21/HTML%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E3%80%81%E5%9D%97%E7%8A%B6%E5%85%83%E7%B4%A0%E3%80%81%E8%A1%8C%E5%86%85%E5%9D%97%E7%8A%B6%E5%85%83%E7%B4%A0%E7%9A%84%E5%8C%BA%E5%88%AB/%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A004.png" alt="行内元素"></p><p>　在HTML5中，程序员可以自定义标签，在任意定义标签中，加入display:block;即可，当然也可以是行内或行内块状。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;HTML可以将元素分类方式分为行内元素、块状元素和行内块状元素三种。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>蔬菜生活录(4)</title>
    <link href="http://example.com/2021/02/08/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%95-4/"/>
    <id>http://example.com/2021/02/08/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%95-4/</id>
    <published>2021-02-08T11:56:46.000Z</published>
    <updated>2021-02-08T12:39:58.558Z</updated>
    
    <content type="html"><![CDATA[<p>2021.2.8 回家</p><p>在学校孤寡了1个多月，终于我也放假了。</p><a id="more"></a><p>越到回家的日子，心情也就越按捺不住，<br><img src="/2021/02/08/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%95-4/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%954-01.jpg" alt="蔬菜得生活录"><br>7号年前最后一天上班，</p><p>人在上班，心早已不知道飘到哪里去了。</p><p>实习的这段日子真的很开心，</p><p>认识了很多新朋友，包括工作上和生活中的，</p><p>同时也学到了很多东西，这也更加丰富了自己的知识范围。</p><p>最近在追很多的剧，都是十分喜欢的，如韩国的 女神的降临<br><img src="/2021/02/08/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%95-4/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%954-05.jpg" alt="蔬菜得生活录"><br>很多人认为男生看韩剧是很不可思议的行为，尤其是一些偶像情感剧</p><p>但是这部剧真的很不错，也是一个朋友推荐的，</p><p>剧情不仅搞笑有内涵，而且让人代入感很足，</p><p>另外，漫威的旺达与幻视也是我的最爱，<br><img src="/2021/02/08/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%95-4/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%954-04.jpg" alt="蔬菜得生活录"><br>作为漫威的老粉，又怎么能错过呢</p><p>有必要提到一句，伊丽莎白·奥尔森的颜值真的太绝了</p><p>当然了，还有许多好看的剧，后面也会与大家分享</p><p>接下来，我将挑战一个月在职备考公务员</p><p>当然，能进面的概率是几乎渺茫，</p><p>不过，我也想看看自己的耐心能去到什么样的程度</p><p>我也将会制定严密的复习计划<br><img src="/2021/02/08/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%95-4/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%954-03.jpg" alt="蔬菜得生活录"><br>各位做题人们，奥里给！！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2021.2.8 回家&lt;/p&gt;
&lt;p&gt;在学校孤寡了1个多月，终于我也放假了。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>WEB存储</title>
    <link href="http://example.com/2021/02/05/WEB%E5%AD%98%E5%82%A8/"/>
    <id>http://example.com/2021/02/05/WEB%E5%AD%98%E5%82%A8/</id>
    <published>2021-02-05T12:14:11.000Z</published>
    <updated>2021-02-05T12:41:13.614Z</updated>
    
    <content type="html"><![CDATA[<p><span style="color:#F67F30">什么是 HTML5 Web 存储?</span></p><a id="more"></a><p>使用HTML5可以在本地存储用户的浏览数据。</p><p>早些时候,本地存储使用的是 cookie。但是Web 存储需要更加的安全与快速. 这些数据不会被保存在服务器上，但是这些数据只用于用户请求网站数据上.它也可以存储大量的数据，而不影响网站的性能.</p><p>数据以 键/值 对存在, web网页的数据只允许该网页访问使用。</p><p><span style="color:#F67F30">Cookie、session和localStorage、以及sessionStorage之间的区别</span></p><p>cookie的内容主要包括：名字、值、过期时间、路径和域。路径与域一起构成cookie的作用范围。若不设置时间，则表示这个cookie的生命期为浏览器会话期间，关闭浏览器窗口，cookie就会消失。这种生命期为浏览器会话期的cookie被称为会话cookie。<br>会话cookie一般不存储在硬盘而是保存在内存里，当然这个行为并不是规范规定的。若设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再打开浏览器这些cookie仍然有效直到超过设定的过期时间。对于保存在内存里的cookie，不同的浏览器有不同的处理方式session机制。<br>当程序需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否已包含了一个session标识（称为session id），如果已包含则说明以前已经为此客户端创建过session，服务器就按照session id把这个session检索出来使用（检索不到，会新建一个），如果客户端请求不包含session id，则为客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个session id将被在本次响应中返回给客户端保存。保存这个session id的方式可以采用cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发送给服务器。</p><p><img src="/2021/02/05/WEB%E5%AD%98%E5%82%A8/web%E5%AD%98%E5%82%A801.jpg" alt="web存储"></p><p><span style="color:#F67F30">二、cookie和session的区别</span></p><p>1、cookie数据存放在客户的浏览器上，session数据放在服务器上<br>2、cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗，考虑<em>到安全应当使用session<br>3、session会在一定时间内保存在服务器上，当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用cookie<br>4、单个cookie保存的数</em>据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie<br>5、建议将登录信息等重要信息存放为session，其他信息如果需要保留，可以放在cookie中<br>6、session保存在服务器，客户端不知道其中的信心；cookie保存在客户端，服务器能够知道其中的信息<br>7、session中保存的是对象，cookie中保存的是字符串<br>8、session不能区分路径，同一个用户在访问一个网站期间，所有的session在任何一个地方都可以访问到，而cookie中如果设置了路径参数，那么同一个网站中不同路径下的cookie互相是访问不到的。<br>9、COOKIE:是服务端向客户端写入的小的片段信息。cookie信息保存在服务器缓存区，不会在客户端显现。当你第一次登陆一个网站，服务器向你的机器写得片段信息。你可以在Internet选项中找到存放cookie的文件夹。如果不删除，cookie就一直在这个文件夹中。<br>10、session需要借助cookie才能正常工作。如果客户端完全禁止cookie，session将失效。 但是如果服务器端启用了url编码，也就是用 URLEncoder.encode()把所有的url编码了，则会在url后面出现如下类似的东西 index.jsp:jsessionid=fdsaffjdlks;jaf;lkdjsf 服务器通过这个进行session的判断.<br>11.Cookie支持跨域名访问，例如将domain属性设置为“.biaodianfu.com”，则以“.biaodianfu.com”为后缀的一切域名均能够访问该Cookie。跨域名Cookie如今被普遍用在网络中，例如Google、Baidu、Sina等,而Session则不会支持跨域名访问。Session仅在他所在的域名内有效。仅运用Cookie或者仅运用Session可能完成不了理想的效果。这时应该尝试一下同时运用Cookie与Session。Cookie与Session的搭配运用在实践项目中会完成很多意想不到的效果。</p><p><span style="color:#F67F30">三、web Storage和Cookie的区别</span><br>Web Storage的概念和cookie相似，区别是它是为了更大容量存储设计的，cookie的大小是受限的，并且每次请求一个新的页面的时候cookie都会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定作用域，不可跨域调用。<br>除此之外，web storage拥有setItem,getItem,removeItem,clear等方法，不像cookie需要前端开发者自己封装setCookie，getCookie。<br>但是cookie也是不可或缺的，cookie的作用是与服务器进行交互，作为http规范的一部分而存在的，而web Storage仅仅是为了在本地“存储”数据而生<br>sessionStorage、localStorage、cookie都是在浏览器端存储的数据，其中sessionStorage的概念很特别，引入了一个“浏览器窗口”的概念，sessionStorage是在同源的同窗口中，始终存在的数据，也就是说只要这个浏览器窗口没有关闭，即使刷新页面或进入同源另一个页面，数据仍然存在，关闭窗口后，sessionStorage就会被销毁，同时“独立”打开的不同窗口，即使是同一页面，sessionStorage对象也是不同的</p><p>Web Storage带来的好处：<br>1、减少网络流量：一旦数据保存在本地之后，就可以避免再向服务器请求数据，因此减少不必要的数据请求，减少数</p><p>据在浏览器和服务器间不必要的来回传递<br>2、快速显示数据：性能好，从本地读数据比通过网络从服务器上获得数据快得多，本地数据可以及时获得，再加上网</p><p>页本身也可以有缓存，因此整个页面和数据都在本地的话，可以立即显示<br>3、临时存储：很多时候数据只需要在用户浏览一组页面期间使用，关闭窗口后数据就可以丢弃了，这种情况使用sessionStorage非常方便</p><p><span style="color:#F67F30">四、浏览器本地存储与服务器端存储的区别 </span><br>其实数据既可以在浏览器本地存储，也可以在服务器端存储<br>浏览器可以保存一些数据，需要的时候直接从本地存取，sessionStorage、localStorage和cookie都是由浏览器存储在本地的数据<br>服务器端也可以保存所有用户的所有数据，但需要的时候浏览器要向服务器请求数据。<br>1、服务器端可以保存用户的持久数据，如数据库和云存储将用户的大量数据保存在服务器端<br>2、服务器端也可以保存用户的临时会话数据，服务器端的session机制，如jsp的session对象，数据保存在服务器上，</p><p>实际上，服务器和浏览器之间仅需传递session id即可，服务器根据session id找到对应用户的session对象，会话数据仅在一段时间内有效，这个时间就是server端设置的session有效期</p><p>服务器端保存所有的用户的数据，所以服务器端的开销较大，而浏览器端保存则把不同用户需要的数据分别保存在用户各自的浏览器中，浏览器端一般只用来存储小数据，而非服务可以存储大数据或小数据服务器存储数据安全一些，浏览器只适合存储一般数据</p><p><span style="color:#F67F30">五、sessionStorage、localStorage和cookie的区别</span></p><p>共同点：都是保存在浏览器端、且同源的<br>区别：<br>1、cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递，而sessionStorage和localStorage不会自动把数据发送给服务器，仅在本地保存。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下<br>2、存储大小限制也不同，cookie数据不能超过4K，同时因为每次http请求都会携带cookie、所以cookie只适合保存很小的数据，如会话标识。sessionStorage和localStorage虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大<br>3、数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭之前有效；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie：只在设置的cookie过期时间之前有效，即使窗口关闭或浏览器关闭<br>4、作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；localstorage在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的<br>5、web Storage支持事件通知机制，可以将数据更新的通知发送给监听者<br>6、web Storage的api接口使用更方便<br><img src="/2021/02/05/WEB%E5%AD%98%E5%82%A8/web%E5%AD%98%E5%82%A802.jpg" alt="web存储"><br><span style="color:#F67F30">六、sessionStorage与页面js数据对象的区别</span></p><p>页面中一般的js对象的生存期仅在当前页面有效，因此刷新页面或转到另一页面这样的重新加载页面的情况，数据就不存在了<br>而sessionStorage只要同源的同窗口中，刷新页面或进入同源的不同页面，数据始终存在，也就是说只要浏览器不关闭，数据仍然存在</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;span style=&quot;color:#F67F30&quot;&gt;什么是 HTML5 Web 存储?&lt;/span&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>蔬菜生活录(3)</title>
    <link href="http://example.com/2021/02/02/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%95-3/"/>
    <id>http://example.com/2021/02/02/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%95-3/</id>
    <published>2021-02-02T12:49:25.000Z</published>
    <updated>2021-02-02T13:44:20.108Z</updated>
    
    <content type="html"><![CDATA[<p>距离放假还有6天！</p><a id="more"></a><p><img src="/2021/02/02/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%95-3/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%9501.jpg" alt="蔬菜得生活录"><br>这两个礼拜真的是累坏了，</p><p>感觉每天除了工作，还是工作，</p><p>但是即使工作再忙，也会坚持自己的兴趣爱好，</p><p>在闲暇的时间，约上三五好友，一起开黑打游戏，<br><img src="/2021/02/02/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%95-3/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%9502.jpg" alt="s蔬菜得生活录"><br>在风和日丽的下午，也会去球场蹭篮球打，</p><p>偶尔也会去山底夜跑，当你大汗淋漓的时候，感觉所有的烦恼都追不上自己了</p><p>但这些，现在也只有周末才有时间去做。</p><p>由于在学校留宿，我被分到了其他宿舍和别人一起住，但是我晚上还是回到自己宿舍睡，因此一直在二楼和三楼之间往返跑来跑去，每天洗澡得时候都会去三楼拿好衣服，再回去二楼洗澡，洗完了之后，到了睡觉得时候，就又得回去三楼自己宿舍，这真的太折磨自己了，哈哈</p><p><img src="/2021/02/02/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%95-3/%E8%94%AC%E8%8F%9C%E7%94%9F%E6%B4%BB%E5%BD%9504.jpg" alt="s蔬菜得生活录"><br>学校北门新开了家雪の茶，而且新店优惠统一10元，抱着尝鲜得心态，去试了试。店里环境很不错，一进门就能感受到暖系得灯光，天花板上得祭几盏长吊灯显得格外耀眼，<br>而且空间也很大，顺序摆列着好几张大沙发和桌子，一切布置得都十分舒适，单唯一不足得是，来店里得人真是少之可怜，也许是因为放假得缘故吧。<br>点了杯珍珠鲜奶，味道挺不错，坐下来一边刷着剧，一边喝着奶茶，加上在如此舒适得环境中，一天得疲劳都瞬间消失不见。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;距离放假还有6天！&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>浅谈前端八大UI库</title>
    <link href="http://example.com/2021/01/31/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%85%AB%E5%A4%A7UI%E5%BA%93/"/>
    <id>http://example.com/2021/01/31/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%85%AB%E5%A4%A7UI%E5%BA%93/</id>
    <published>2021-01-31T10:45:08.000Z</published>
    <updated>2021-01-31T11:03:27.673Z</updated>
    
    <content type="html"><![CDATA[<p><span style="color:#F67F30">浅谈前端八大UI库</span></p><a id="more"></a><p>下面是本博客所涉及到的八个UI库</p><p>Element UI<br>vuetify<br>Ant Design<br>Bottstrap<br>layui<br>Vant UI<br>Framework7<br>WEUI</p><p>这是我从前端的众多 ui 库中选出来了八个，但是并不是说没有被列出来的 UI 库都不好，没有这个意思，不要把我置身于水深火热之中哈。这里之所以选出这个八个，是因为咱们的一个篇幅关系，不可能把所有的好的前端UI库都拿出来说一遍，所以我就挑出来了我个人感觉八个比较有代表性的 UI 库。那么下面我们一个一个来看。</p><hr><p><img src="/2021/01/31/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%85%AB%E5%A4%A7UI%E5%BA%93/%E5%89%8D%E7%AB%AF%E5%85%AB%E5%A4%A7ui%E5%BA%9301.png" alt="前端ui库"></p><p><span style="color:#F67F30">Element UI</span><br>开发团队：饿了么前端<br>官网：<a href="https://element.eleme.cn/#/zh-CN">https://element.eleme.cn/#/zh-CN</a><br>github（ star：44.1k ）：<a href="https://github.com/ElemeFE/element">https://github.com/ElemeFE/element</a><br>特性：<br>​ Element-UI 是目前针对于 Vue 开发 PC 端项目的时候所使用到的一个主流 UI 库。在座的有学习 Vue 开发的同学或多或少应该都知道 Element-UI 。那我们就从它开始聊。</p><p>​ 大家有没有想过，对于一个 UI 库来说，它是如何被广大的开发者所接受的？或者说它是如何被用户所接受的？</p><p>​ 我认为，一个产品，具体到当前就是 Element-UI 这个库，这个库对于我们开发者来说就是产品，我们开发者就是它的用户。而一个产品之所以可以被用户所接受，所依赖的无非是三点：</p><ol><li>产品的文档对于用户来说足够清晰</li><li>产品的功能对于用户来说足够简单</li><li>产品的 UI 对于用户来说足够友好</li></ol><p>​ 什么意思呢？我们一个一个来解释。</p><p>​ 首先我们来看第一个：产品的文档对于用户来说足够清晰。这是什么意思呢？大家想一下当我们买了一个东西的时候，最初我们不知道这个东西是怎么用的？那么我们一般都会去看一下它的说明书，或者直接去网上搜索一些这个产品的资料，对吧。那么这个时候如果它的说明书写的不清不楚，甚至有些地方写的根本就不对。那么你如果想要把这个东西使用熟练，是不是要花费特别大的精力。也就是我们开发者常说的，这个框架拥有了过高的学习成本，或者说这个框架学习曲线过于陡峭，不够平滑。那么这样的话无疑会劝退一部分用户。对吧。</p><p>​ 所以说如果一个框架如果想要被开发者广为接受，那么一个清晰的文档肯定是首要的条件。那么对于 Element-UI 来说，它的一个文档就比较清晰。在组件部分，从安装 Element-UI 到各个组件的效果描述的都是非常清楚的，每一步应该如何做，这样做会产生什么样的结果都在文档上描述的很清楚。这个就是一个清晰的产品文档。</p><p>​ 第二条：产品的功能对于用户来说足够简单。这一条也好理解。对于我们开发者来说，当我们使用一个框架的时候，我们想要的是什么？我们想要一个框架：你的功能要足够的复杂，但是你的接口要足够的简单。什么意思呢？大家可以参照一下自己的手机。现在智能手机的功能已经非常复杂了。可以打电话，可以玩游戏，可以看电影。但是一旦你熟悉了它之后，它使用起来确实非常简单的。你不会去关心它的功能是如何实现的，你关心的只是是否可以通过简单的操作来完成复杂的功能。就是这个道理放到我们开发者身上也一样。我不关心你组件封装的如何复杂，我所关心的只是你暴露出来的接口。</p><p>​ 第三条：产品的 UI 对于用户来说足够友好。这一点是什么意思呢？其实这一点主要是对于产品经理和设计师来说的。大家有过开发经验的同学，特别是有过在公司工作过的同学。应该很清楚，你的项目最终开发出来帐什么样子，不是你决定的。是产品经理和设计师来决定的。那设计项目的 UI 他们的依据是什么呢？他们会依据产品的特性、产品的定位等等，但是绝大部分的 UI 依据都是目前用户的一个普遍审美。</p><p>​ 大家有没有发现对于现在的 APP 、网页甚至手机来说，他们的 UI 同质化非常严重吗？差不多都是一个风格的，对吧。出现这个问题的原因就是因为大众的一个审美会定位到同一块区间，而设计根据大众的审美来定位产品的样式，所以才会出现这种同质化的问题。</p><p>​ 那么这个和我们开发者有什么关系呢？大家想一下，如果一个 UI 库它能够符合大众的普遍审美，并且提供了一种良好的交互体验，那么如果你是设计师的话，你会不会参照或者直接使用 UI 库所提供的样式。因为对于这种 UI 库来说，它的样式会比大部分的设计做出来的样式还要好。</p><p>​ 那么对于我们开发者来说，当你拿到设计稿的时候，你发现设计稿上的样式和 Element-UI 一样，你是不是到 Element-UI 上直接拿过来用就可以了呀。</p><p>​ 并且对于 Element-UI 它额外还提供了 自定义主题 和 国际化的功能。这些具体怎么做，文档说的很详细，我们就不展开说了。</p><p>​ 那么总结一下 Element-UI 。</p><ol><li>Element-UI 是现在基于 Vue 的一个非常好用的桌面端 UI 组件库</li><li>支持 @vue/cli 项目的直接添加，支持按需导入、国际化、支持自定义主题</li><li>文档清晰，学习成本低</li><li>提供的组件足够使用</li><li>UI 的风格符合目前大众的普遍审美</li><li>如果你想要做一个公司级别的产品，那么 Element-UI 基本可以满足需求，但是难免样式、风格上会同质化严重</li></ol><hr><p>但是如果你想要弄一个自己的网站、自己的项目，并且希望在样式上，不喜欢那么同质化，应该怎么呢？这个时候，你可以参考下，另外一个 UI 库，就是 vuetify。<br><img src="/2021/01/31/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%85%AB%E5%A4%A7UI%E5%BA%93/%E5%89%8D%E7%AB%AF%E5%85%AB%E5%A4%A7ui%E5%BA%9302.png" alt="前端ui库"><br><span style="color:#F67F30">vuetify</span><br>开发团队：麻省理工学院开源项目<br>官网：<a href="https://vuetifyjs.com/zh-Hans/">https://vuetifyjs.com/zh-Hans/</a><br>github（ star：24.1k ）：<a href="https://github.com/vuetifyjs/vuetify">https://github.com/vuetifyjs/vuetify</a><br>特性：<br>​ vuetify 是麻省理工学院的开源项目，文档同样支持全球化，它是基于 Android Material Design 风格的一个 vue 前端组件库。同样支持 @vue/cli 项目的直接添加。</p><p>​ 不过 vuetify 的 Material Design 风格在国内并不是很大众， Material Design 是由Google开发的设计语言，第一次公开使用应该是在 Android 5.0 上面，但是在国内这种样式风格一直推行的效果不好。在国外这种风格被接受的程度还可以，但是国内你会发现很少见。</p><p>​ 这样就导致这种设计风格不会存在大量同质化的问题。同样的如果你使用了这种风格的话，也必须要承担一定的风险。所以对于公司级项目来说，如果使用了 vuefity 的话，那么无形中就会为产品增加一些风险。不过如果你是要做一个自己的项目，并且希望你的项目拥有一些自己的个性，那么 vuetify 无疑是一个很好的选择。</p><p>​ 对于 vuetify 本身的一个功能层面上，它的文档、它的组件都可以完全满足我们的一个日常使用，比如，在它的 UI 组件里面，我们常用到的这些组件都是比较全的。</p><p>​ 另外它还提供了一些扩展的指令，这些指令是在 vue 的基础上做的一些扩展，可以满足一些特定的需求。</p><p>​ 总的来说，vuetify 上手的难度会比 elementUI 要高一些，主要是因为国外的人的思维和国内的人还是有一些不同，所以这就导致了 vuetify 对于国内来说会难免有一些水土不服，而产生两个极端，也就是所谓的：喜欢他它的人很喜欢，讨厌它的人很讨厌。</p><p>​ 总结一下 vuetify：</p><ol><li>vuetify 是国外团队进行开发的一个基于 vue 的组件库</li><li>支持 @vue/cli 项目的直接添加，支持按需导入、国际化、提供了定制功能（样式、颜色、主题等等）</li><li>文档相对清晰，但是和国人的思维不太一样，导致学习成本相对高一些</li><li>提供的组件足够使用，并且提供了 v- 开头的扩展指令，还有付费专题模块</li><li>UI 的风格使用的是 Google 推出的 Material Design 的设计风格，在国内推广度相对低一些</li><li>使用 vuetify 在 UI 样式上，会有一些额外的风险，但是可以避免同质化的问题，比较适合一些个人或者需要彰显个性的项目</li></ol><hr><p>介绍了两个都是基于 vue 的 UI 库。那么下面我们来看一下基于(常用于) React 的 UI 库。<br><img src="/2021/01/31/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%85%AB%E5%A4%A7UI%E5%BA%93/%E5%89%8D%E7%AB%AF%E5%85%AB%E5%A4%A7ui%E5%BA%9303.png" alt="前端ui库"></p><p><span style="color:#F67F30">Ant Design</span><br>开发团队：蚂蚁金服体验技术部<br>官网：<a href="https://ant.design/index-cn">https://ant.design/index-cn</a><br>github（ star：57.6k ）：<a href="https://github.com/ant-design/ant-design/">https://github.com/ant-design/ant-design/</a><br>特性：<br>Ant Design 被官方定义为一种设计体系，不过设计体系这种高雅的东西，对咱们这些俗人应该认知不大，我们所认知最明确的，就是这个东西能为我们的开发带来什么帮助。所以我们下面就把它当作一个 UI 库来看。</p><p>Ant Design 在 react 中的地位，应该和 element UI 在 vue 中的地位是一样的，都可以说是最火爆的 UI 库之一。</p><p>Ant Design 同时支持 React、Vue、Angular，也就是说我们在这三个主流框架中都可以使用，但是 Ant Design 对于React 的支持是最好的，所以一般我们说到 Ant Design ，都会说他是一个基于 React UI 的一个组件库。</p><p>​ Ant Design 是阿里巴巴-蚂蚁金服体验技术部所设计的一个 UI 库，目前最新的是 4.x 的版本，我们看它的主页，就能够感觉出来，一个整体的设计风格是非常赞的。</p><p>​ 同样，像国际化、定制主题的这些功能，Ant Design 也同样是支持的，这个没得说，具体怎么做，大家看文档。</p><p>​ Ant Design 的文档也非常的详细，无论到快速上手，到各个组件的使用，都有非常详细的文档。</p><p>​ 另外非常值得一提的就是关于 Ant Design 的社区，它的社区中提供了非常多的精品组件和一些开发中常用的一些工具推荐，这一点是 ElementUI 上所没有的，可以说它的社区是真的很用心的在做的。</p><p>​ 对于 Ant Design 来说，如果把它作为 React 项目的一个核心 UI 库的话，那么它是完全可以胜任的，没有一点问题。并且无论是它的开发团队也好，它的一个社区也好，都可以很好的保证该库的一个正常的升级和迭代。</p><p>​ 总结一下 Ant Design：</p><ol><li>Ant Design 是阿里巴巴-蚂蚁金服体验技术部所设计的一个 UI 库，一般用于基于 React 的项目</li><li>支持在 create-react-app（React 官方脚手架） 项目的直接添加，支持按需导入、国际化、提供了定制主题</li><li>文档清晰，学习成本低</li><li>提供的组件足够使用，并且提供了精品社区服务</li><li>UI 的风格符合目前大众的普遍审美</li><li>如果你想要做一个公司级别的产品，那么 Ant Design 基本可以满足需求，但是难免样式、风格上会同质化严重</li></ol><hr>上面说的都是一些对于现阶段，也就是 web 3.0 阶段的 UI 库，然后我们来看两个适用于 web 2.0 阶段的 UI 库。<p><img src="/2021/01/31/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%85%AB%E5%A4%A7UI%E5%BA%93/%E5%89%8D%E7%AB%AF%E5%85%AB%E5%A4%A7ui%E5%BA%9304.png" alt="前端ui库"></p><p><span style="color:#F67F30">Bootstrap</span><br>开发团队：Twitter<br>官网：<a href="https://www.bootcss.com/">https://www.bootcss.com/</a><br>github（ star：139k ）：<a href="https://getbootstrap.com/">https://getbootstrap.com/</a><br>特性：<br>​ Bootstrap 前端的同学应该没有不知道。在之前的 web 2.0 阶段，可以说是大名鼎鼎了。我们这里提到了 web 3.0 和 web 2.0 ，那么给大家解释一下。</p><p>​ 整个前端开发的历史，我把它分成了三个阶段，web 1.0 、web 2.0 和 web 3.0。</p><p>​ 对于 web 1.0 来说， 指的就是 html、css、js的那个阶段，整个前端的交互还都是以一种原生的方式进行展示，这个时候还没有前端工程师的概念，或者说这个概念很稀薄，大部分的前端工作都是由后端的工程师来兼职进行开发的。</p><p>​ 而 web 2.0 阶段，最大的标志就是 jQuery、bootstrap、还有各种模板引擎的库开始出现，这个时候开始逐渐有了前端开发工程师的岗位，但是前端依然不够兴盛，因为虽然这些新出现的东西使前端的开发有了一些壁垒，但是这种壁垒明显不够坚固，并且这些库并没有带来太大的本质上的变化，更多的是一种增强。</p><p>​ 而 web 3.0 阶段，最大的标志就是 angular、react、vue 的出现。从最初 google 推出了 angular 1， angular 1 一出现，确实可以说是惊艳。他把之前零零碎碎的内容，比如数据驱动，比如模板语法，比如模块化的东西进行了整合，变成了一个大一统的框架。但是因为 angular 1 属于一个最初的尝试，所以在设计上还有很多不完善的地方，这就导致了 angular 2的变化过大，成了一个断层，就引起了很多人的不满。</p><p>​ 而这个时候 react、vue 也开始逐渐崛起，从 angular 手中抢走了大量的开发者。而 react、vue 所推崇的这种渐进式框架的方案，明显更被开发者所接受，所以就导致现在 react 和 vue 的开发者基数要远远的大于 angular了。不过就算是这样，没有人可以否认 angular 所带来的贡献。</p><p>​ angular、react、vue 完全提高了前端的壁垒，随之也逐渐出现了很多的周边库，比如 前端路由库、全局状态管理工具、webpack 这种大一统的前端打包工具。</p><p>​ 这些内容的出现，就导致了前端的学习成本变得越来越高，也就使得前端的壁垒变得越来越坚固。</p><p>​ 再加上用户对于体验的要求越来越高，后端工程师对此逐渐开始无力，这就导致前端工程师开始出现，前后端的项目分离变成了现在的正统，大家各司其事，后端的工程师主要做后端的内容，前端工程师主要做前端的内容。</p><p>​ 这就是整个前端的一个大概的发展历史，而对于 bootstrap 来说，他在 web 2.0 的时候，是顶顶大名的。使用它来开发的项目不计其数啊，主要原因就是因为它足够简单、易用，并且它的一个设计风格在当时相当超前的。</p><p>​ 不过在现在的阶段，bootstrap 已经开始被使用的越来越少了，哪怕是推出了 bootstrap vue 这种拥抱现阶段的库，也只能说是表现平平。</p><p>​ 但是对于 bootstrao 来说，它就完全没有价值了吗？不是的。如果你的项目需要兼容到 IE8，那么你就没有办法使用之前咱们提到的那些 UI 库，这个时候， bootstrap 这种纯 css 的库，会给你带来很大的帮助。关于 bootstrap，大家应该都会比较熟悉了，我们就不详细说了。</p><p>​ 总结一下 bootstrap：</p><ol><li>Bootstrap 是 Twitter 所设计的一个 UI 库，以 css 样式为主，也提供了一些组件的功能需要配合 js 来进行使用</li><li>使用简单，文档清晰，学习成本低</li><li>提供的组件相对较少</li><li>可以只使用框架中的 css 样式，可嵌入性较高</li><li>UI 的风格符合目前大众的普遍审美</li><li>适合使用在对游览器兼容性有要求的项目中<hr>除了 bootstrap 之外，另外一个 web 2.0 阶段的 UI 库就是 layui 。</li></ol><p><img src="/2021/01/31/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%85%AB%E5%A4%A7UI%E5%BA%93/%E5%89%8D%E7%AB%AF%E5%85%AB%E5%A4%A7ui%E5%BA%9305.png" alt="前端ui库"></p><p><span style="color:#F67F30">layui</span><br>开发团队：自由职业者（贤心）<br>官网：<a href="https://www.layui.com/">https://www.layui.com/</a><br>github（ star：21.1k ）：<a href="https://github.com/sentsin/layui/">https://github.com/sentsin/layui/</a><br>特性：<br>​ layui 是自由职业者（贤心）进行开发的一个前端库，最低可以兼容到 IE8 ，官网介绍它是一个更加适合服务端工程师来开发前端页面的库，但是对于前端工程师来说，如果你的项目要兼容到 IE8 的话，那么使用 layui 也是一个很好的选择。</p><p>​ layui 的主要内容被分成了两个大的部分，1.页面元素。 2.内置模块</p><p>​ 对于页面元素来说，主要就是一些 css 的样式，也就是一些定义好的 css 样式类，这一点和 bootstrap 很像。</p><p>​ 对于内置模块来说，是 layui 比较推崇的一个概念。比如按需引入的模块化。当然这个概念对于现在的前端开发来说，已经变成了一个普遍的功能点了。比如我们前面说到的 Element-UI、vuetify、And Design 都拥有这个功能。 但是在 web 2.0 阶段的时候，这个模块化的功能还是比较先进的。</p><p>​ 至于 layui 中所涉及到的样式部分，按照现在的一个审美来说依然是不过时的，所以说对于现在来说，如果你对前端的技术了解的并不深，或者说你是一个服务端工程师，那么想要开发一个前端页面的话，layui 依然是一个比较好的选择。</p><p>​ 总结下 layui：</p><ol><li>layui 是 自由职业者（贤心）进行开发的一个前端库，最低可以兼容到 IE8</li><li>设置的初衷是让非前端的工程师可以很方便的开发前端页面</li><li>使用简单，文档清晰，学习成本低</li><li>提供页面元素和模块化的概念</li><li>UI 的风格并不过时</li><li>适合非专业前端工程师使用</li></ol><hr><p>之前看了很多桌面端的组件库了，那么下面我们来看几个移动端的 UI 组件库。</p><p><img src="/2021/01/31/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%85%AB%E5%A4%A7UI%E5%BA%93/%E5%89%8D%E7%AB%AF%E5%85%AB%E5%A4%A7ui%E5%BA%9306.png" alt="前端ui库"></p><p><span style="color:#F67F30">Vant-UI</span><br>开发团队：有赞前端团队<br>官网：<a href="https://youzan.github.io/vant/#/zh-CN/">https://youzan.github.io/vant/#/zh-CN/</a><br>github（ star：12.9k ）：<a href="https://github.com/youzan/vant">https://github.com/youzan/vant</a><br>特性：<br>​ Vant-UI 是有赞前端团队开发的一个基于 vue 的移动端组件库。不过对于移动端组件库来说，它和桌面端有非常多的不同。</p><p>​ 比如说，官方的文档，对于移动端的组件库文档来说，大部分都会把整个项目中所有的组件通过一个类似于手机的UI形式给一次性全部罗列出来。</p><p>这个在 PC 端的 UI 库中，大家应该很少见吧。我个人是比较喜欢这种方式的，因为这样它可以让开发者很方便的知道，这个 UI 库它的各个组件的样式效果，是否可以满足个人的需求。</p><p>​ 还有关于兼容性方面，因为是移动端的组件库，那么它都会运行在手机上，而对于手机来说就不会存在 PC 端浏览器 IE 兼容性的问题了。更多的是关于手机系统版本的问题。咱们就以 Vant-UI 为例，他在浏览器支持这方便介绍说，现代浏览器以及 Android 4.0，IOS 8.0 以上的系统都支持，那么以咱们现在的这个时间点来说，基本上就不会存在兼容性的问题了。</p><p>​ 还有就是组件的样式风格上，因为对于移动端设备来说，毕竟大小、尺寸、操作方式都不一样，所以在 UI 的一个整体设计风格上，肯定和 PC 端上有很大的不同。</p><p>​ 然后还有最重要的一点，也是考验移动端组件库的一个非常重要的难点。就是流畅性的问题。这个问题在桌面端组件库上一般不会是一个太大的难点。但是在移动端上面就不太一样了。手机使用的流畅度的问题，在咱们现在依然还是一个大家都非常关注的点，并且对于现在的用户来说，对于移动端流畅度的要求，要更加苛刻，这种苛刻的程度远高于 PC 端。所以说如果你开发了一个 web app 或者 web 端网页的话，如果很卡，那么无论你的 UI 样式做的再好，估计也会大大减分的。</p><p>​ 所以说对于一个移动端的 UI 库来说，它如果要做好其实要比 PC 端的组件库难度更大上一些。而 Vant-UI 在基于 Vue 的移动端组件库中，各方面都是非常不错的。无论是文档、组件的丰富性、易用性上，我个人都比较喜欢。<br><img src="/2021/01/31/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%85%AB%E5%A4%A7UI%E5%BA%93/%E5%89%8D%E7%AB%AF%E5%85%AB%E5%A4%A7ui%E5%BA%9307.png" alt="前端ui库"><br>大家打开 Vant-UI的官网，在业务组件部分，它提供了一些目前商城类系统所常用到的业务模块。比如商品规格，像这种拥有相对固式样式的业务，它提供了成套的业务组件，并且这些业务组件，我们也可以使用 Vue 中的 插槽 功能去进行一些定制这个我觉得是非常非常好的一个功能。</p><p>​ 总结一下 Vant-UI：</p><ol><li>Vant-UI 是有赞前端团队所设计的一个 UI 库，一般用于基于 Vue 的移动端项目</li><li>支持 @vue/cli 项目的直接添加，支持按需导入、国际化、提供了定制功能（样式、颜色、主题等等）</li><li>文档清晰，学习成本低</li><li>提供的组件足够使用，性能不错，并且提供了基于商城业务的成套组件</li><li>UI 的风格以及交互操作可以达到现在的主流标准</li><li>适用于 web app 或者 基于移动端的网页开发</li></ol><hr><p>然后我们来看另外一个移动端组件库</p><p><img src="/2021/01/31/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%85%AB%E5%A4%A7UI%E5%BA%93/%E5%89%8D%E7%AB%AF%E5%85%AB%E5%A4%A7ui%E5%BA%9308.png" alt="前端ui库"><br><span style="color:#F67F30">Framework7</span><br>开发团队：独立开发者（github名：Vladimir Kharlampidi）<br>官网：<a href="http://www.framework7.cn/">http://www.framework7.cn/</a><br>github（ star：15.3k ）：<a href="https://github.com/framework7io/framework7/">https://github.com/framework7io/framework7/</a><br>特性：<br>​ Framework7 是独立开发者开源的一个全功能框架。可以用来构建 IOS、Android和桌面应用程序。注意我们这里说的是框架，不再是一个简单的 UI 组件库了。</p><p>​ 由组件库变成了框架，那么显然带来的问题就是复杂度直线上升了。但是复杂度上升的同时，它能够给我们带来的东西也完全不一样了。打开官网，我们一起来看一下。</p><p>​ 打开官网，首先我们能看到它的一个功能演示。我们主要看 IOS 和 android 这两个部分。</p><p><img src="/2021/01/31/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%85%AB%E5%A4%A7UI%E5%BA%93/%E5%89%8D%E7%AB%AF%E5%85%AB%E5%A4%A7ui%E5%BA%9309.png" alt="前端ui库"></p><p> Framework7 针对 IOS 和 Android 的不同风格提供了不同的展示样式。对于 IOS 是标准的苹果风。对于 Android 则提供了基于 Material Design 的一种设计风格。并且 Framework7 提供了一种很牛的功能，这个功能是其他的 UI 组件库所没有的，那就是基于移动端不同页面的一个过场动画。</p><p>​ 对于 Framework7 因为它是一个框架，所以说它不需要再依赖于向 vue、react 这种其他的框架，它本身就可以完整的去开发一个项目。同时如果你想要基于 vue 或者 react 来配合 Fragment7 使用的话，那么也是可以的。Fragment7 同时也提供了 Framework7 Vue 和 Framework7 React 这两个框架。</p><p>​ 另外对于 Framework7 提供了很多新的概念，比如 Framework7 CLI 、DOM 7 等等，咱们再这里就不在详细说了。</p><p>​ 总结一下 Framework7 ：</p><ol><li>Framework7 是独立开发者所设计的一个全功能框架。可以用来构建 IOS、Android和桌面应用程序。</li><li>本身是一个独立的框架，同时也可以配合 vue 和 react 来使用。整体比较重</li><li>文档汉化不是很好，具有一定的学习成本。</li><li>提供的功能组件、交互视图足够强大，并且也有很多新的概念，性能优秀。</li><li>UI 的风格以及交互操作可以达到原生 APP 95%的体验</li><li>适用于没有资深前端开发工程师的公司使用。</li></ol><hr><p>最后我们来看一个由 微信团队开发的 weui</p><p><img src="/2021/01/31/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%85%AB%E5%A4%A7UI%E5%BA%93/%E5%89%8D%E7%AB%AF%E5%85%AB%E5%A4%A7ui%E5%BA%9310.png" alt="前端ui库"></p><p><span style="color:#F67F30">WEUI</span><br>开发团队：微信官方团队<br>官网：<a href="https://weui.io/">https://weui.io/</a><br>github（ star：24.2k ）：<a href="https://github.com/Tencent/weui">https://github.com/Tencent/weui</a><br>特性：<br>​ weui 是微信官方团队开发的一套同微信原生视觉体验一致的基础样式库。提供了一些组件和样式的简单使用。主要应用于微信内部网页和微信小程序。</p><p>​ 对于 weui 的文档没有放到官网上，而是在 guthub 中。这个大家注意下，别找不到文档就可以。不过微信的文档是相对比较乱的，并且有一些示例代码的地址已经打不开了（2020-03 时测试）。这就导致大家如果想要学习 weui 的使用，那么只能从 github 上下载一下实例代码来学习了。</p><p>​ weui 的话我们不做过多介绍，简单总结下：</p><ol><li>weui 是微信官方团队开发的一套同微信原生视觉体验一致的基础样式库。</li><li>因为只应对微信内部网页和微信小程序，所以所提供的功能相对简单。</li><li>文档稍微乱一些。</li><li>提供的功能组件有限，主要还是应对场景的问题。</li><li>UI 的风格同微信原生视觉体验一致</li><li>适用微信内部网页和微信小程序。</li></ol><hr>合理的运用 UI库 ， 可以大大的提升我们的开发效率，并且保证我们的项目设计维持在一个平均水平之上。<p>但是合理的使用，并不代表着完全依赖，UI 库 可以帮助我们解决设计上 80% 的问题，但是 UI 库也会给我们带来一些限制，比如风格上和设计上。</p><p>所以我们大家需要合理的看待 UI 库的存在。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;span style=&quot;color:#F67F30&quot;&gt;浅谈前端八大UI库&lt;/span&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
